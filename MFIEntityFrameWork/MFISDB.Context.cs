//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MFIEntityFrameWork
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class MFISDBContext : DbContext
    {
        public MFISDBContext()
            : base("name=MFISDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccountMaster> AccountMasters { get; set; }
        public DbSet<AccountTransaction> AccountTransactions { get; set; }
        public DbSet<RefMaster> RefMasters { get; set; }
        public DbSet<RefValueMaster> RefValueMasters { get; set; }
        public DbSet<AccountHead> AccountHeads { get; set; }
        public DbSet<ReceiptAppropriationPriority> ReceiptAppropriationPriorities { get; set; }
        public DbSet<SystemSetting> SystemSettings { get; set; }
    
        [EdmFunction("MFISDBContext", "Split")]
        public virtual IQueryable<string> Split(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[MFISDBContext].[Split](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual ObjectResult<usp_Result> usp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_Result>("usp");
        }
    
        public virtual ObjectResult<uspAccountGetAHCODEByFederation_Result> uspAccountGetAHCODEByFederation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountGetAHCODEByFederation_Result>("uspAccountGetAHCODEByFederation");
        }
    
        public virtual ObjectResult<uspAccountGetAHCODEByIsmemberTransaction_Result> uspAccountGetAHCODEByIsmemberTransaction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountGetAHCODEByIsmemberTransaction_Result>("uspAccountGetAHCODEByIsmemberTransaction");
        }
    
        public virtual ObjectResult<uspAccountGetAll_Result> uspAccountGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountGetAll_Result>("uspAccountGetAll");
        }
    
        public virtual int uspAccountHeadCopy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountHeadCopy");
        }
    
        public virtual ObjectResult<uspAccountHeadCopy2_Result> uspAccountHeadCopy2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountHeadCopy2_Result>("uspAccountHeadCopy2");
        }
    
        public virtual ObjectResult<uspAccountHeadGetAll_Result> uspAccountHeadGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountHeadGetAll_Result>("uspAccountHeadGetAll");
        }
    
        public virtual ObjectResult<uspAccountHeadGetByAHID_Result> uspAccountHeadGetByAHID(Nullable<int> aHID)
        {
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountHeadGetByAHID_Result>("uspAccountHeadGetByAHID", aHIDParameter);
        }
    
        public virtual ObjectResult<uspAccountHeadGetByIsFederation_Result> uspAccountHeadGetByIsFederation(Nullable<bool> isFederation)
        {
            var isFederationParameter = isFederation.HasValue ?
                new ObjectParameter("IsFederation", isFederation) :
                new ObjectParameter("IsFederation", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspAccountHeadGetByIsFederation_Result>("uspAccountHeadGetByIsFederation", isFederationParameter);
        }
    
        public virtual int uspAccountHeadInsertUpdate(ObjectParameter aHID, ObjectParameter aHCode, string aHName, string tE_AHName, Nullable<int> aHType, Nullable<int> parentAHID, Nullable<bool> isMemberTransaction, Nullable<bool> isSLAccount, Nullable<decimal> openingBalance, string openingBalanceType, Nullable<int> aHLevel, Nullable<bool> isFederation, Nullable<int> userID, string origin, Nullable<int> originObjectId)
        {
            var aHNameParameter = aHName != null ?
                new ObjectParameter("AHName", aHName) :
                new ObjectParameter("AHName", typeof(string));
    
            var tE_AHNameParameter = tE_AHName != null ?
                new ObjectParameter("TE_AHName", tE_AHName) :
                new ObjectParameter("TE_AHName", typeof(string));
    
            var aHTypeParameter = aHType.HasValue ?
                new ObjectParameter("AHType", aHType) :
                new ObjectParameter("AHType", typeof(int));
    
            var parentAHIDParameter = parentAHID.HasValue ?
                new ObjectParameter("ParentAHID", parentAHID) :
                new ObjectParameter("ParentAHID", typeof(int));
    
            var isMemberTransactionParameter = isMemberTransaction.HasValue ?
                new ObjectParameter("IsMemberTransaction", isMemberTransaction) :
                new ObjectParameter("IsMemberTransaction", typeof(bool));
    
            var isSLAccountParameter = isSLAccount.HasValue ?
                new ObjectParameter("IsSLAccount", isSLAccount) :
                new ObjectParameter("IsSLAccount", typeof(bool));
    
            var openingBalanceParameter = openingBalance.HasValue ?
                new ObjectParameter("OpeningBalance", openingBalance) :
                new ObjectParameter("OpeningBalance", typeof(decimal));
    
            var openingBalanceTypeParameter = openingBalanceType != null ?
                new ObjectParameter("OpeningBalanceType", openingBalanceType) :
                new ObjectParameter("OpeningBalanceType", typeof(string));
    
            var aHLevelParameter = aHLevel.HasValue ?
                new ObjectParameter("AHLevel", aHLevel) :
                new ObjectParameter("AHLevel", typeof(int));
    
            var isFederationParameter = isFederation.HasValue ?
                new ObjectParameter("IsFederation", isFederation) :
                new ObjectParameter("IsFederation", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var originParameter = origin != null ?
                new ObjectParameter("Origin", origin) :
                new ObjectParameter("Origin", typeof(string));
    
            var originObjectIdParameter = originObjectId.HasValue ?
                new ObjectParameter("OriginObjectId", originObjectId) :
                new ObjectParameter("OriginObjectId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountHeadInsertUpdate", aHID, aHCode, aHNameParameter, tE_AHNameParameter, aHTypeParameter, parentAHIDParameter, isMemberTransactionParameter, isSLAccountParameter, openingBalanceParameter, openingBalanceTypeParameter, aHLevelParameter, isFederationParameter, userIDParameter, originParameter, originObjectIdParameter);
        }
    
        public virtual int uspAccountHeadMove(string aHIDS, Nullable<int> parentAHID, Nullable<int> ahLevel, Nullable<int> ahType, Nullable<int> userID)
        {
            var aHIDSParameter = aHIDS != null ?
                new ObjectParameter("AHIDS", aHIDS) :
                new ObjectParameter("AHIDS", typeof(string));
    
            var parentAHIDParameter = parentAHID.HasValue ?
                new ObjectParameter("ParentAHID", parentAHID) :
                new ObjectParameter("ParentAHID", typeof(int));
    
            var ahLevelParameter = ahLevel.HasValue ?
                new ObjectParameter("AhLevel", ahLevel) :
                new ObjectParameter("AhLevel", typeof(int));
    
            var ahTypeParameter = ahType.HasValue ?
                new ObjectParameter("AhType", ahType) :
                new ObjectParameter("AhType", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountHeadMove", aHIDSParameter, parentAHIDParameter, ahLevelParameter, ahTypeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspBankDetailsByBankDetailID_Result> uspBankDetailsByBankDetailID(Nullable<int> bankDetailID)
        {
            var bankDetailIDParameter = bankDetailID.HasValue ?
                new ObjectParameter("BankDetailID", bankDetailID) :
                new ObjectParameter("BankDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankDetailsByBankDetailID_Result>("uspBankDetailsByBankDetailID", bankDetailIDParameter);
        }
    
        public virtual ObjectResult<uspBankDetailsByBankEntryID_Result> uspBankDetailsByBankEntryID(Nullable<int> bankEntryID)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankDetailsByBankEntryID_Result>("uspBankDetailsByBankEntryID", bankEntryIDParameter);
        }
    
        public virtual ObjectResult<uspBankDetailsByEntityID_Result> uspBankDetailsByEntityID(Nullable<int> entityID)
        {
            var entityIDParameter = entityID.HasValue ?
                new ObjectParameter("EntityID", entityID) :
                new ObjectParameter("EntityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankDetailsByEntityID_Result>("uspBankDetailsByEntityID", entityIDParameter);
        }
    
        public virtual ObjectResult<uspBankDetailsByObjectID_Result> uspBankDetailsByObjectID(Nullable<int> objectID)
        {
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankDetailsByObjectID_Result>("uspBankDetailsByObjectID", objectIDParameter);
        }
    
        public virtual ObjectResult<uspBankDetailsGetAll_Result> uspBankDetailsGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankDetailsGetAll_Result>("uspBankDetailsGetAll");
        }
    
        public virtual int uspBankMasterChangeStatus(ObjectParameter bankEntryID, ObjectParameter bankCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBankMasterChangeStatus", bankEntryID, bankCode, statusCode, userIdParameter);
        }
    
        public virtual int uspBankMasterDelete(ObjectParameter bankEntryID, ObjectParameter bankCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBankMasterDelete", bankEntryID, bankCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspBankMasterGetViewByID_Result> uspBankMasterGetViewByID(Nullable<int> bankEntryID)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankMasterGetViewByID_Result>("uspBankMasterGetViewByID", bankEntryIDParameter);
        }
    
        public virtual int uspBankMasterInsertUpdate(ObjectParameter bankEntryID, Nullable<int> bankName, string branchName, string iFSC, string accountNumber, Nullable<int> accountType, string contactNumber, string email, string address, Nullable<bool> isMasterEntry, Nullable<int> userId, ObjectParameter bankCode)
        {
            var bankNameParameter = bankName.HasValue ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isMasterEntryParameter = isMasterEntry.HasValue ?
                new ObjectParameter("IsMasterEntry", isMasterEntry) :
                new ObjectParameter("IsMasterEntry", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBankMasterInsertUpdate", bankEntryID, bankNameParameter, branchNameParameter, iFSCParameter, accountNumberParameter, accountTypeParameter, contactNumberParameter, emailParameter, addressParameter, isMasterEntryParameter, userIdParameter, bankCode);
        }
    
        public virtual int uspBranchChangeStatus(ObjectParameter branchID, ObjectParameter branchCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBranchChangeStatus", branchID, branchCode, statusCode, userIdParameter);
        }
    
        public virtual int uspBranchDelete(ObjectParameter branchID, ObjectParameter branchCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBranchDelete", branchID, branchCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspBranchGetAll_Result> uspBranchGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBranchGetAll_Result>("uspBranchGetAll");
        }
    
        public virtual ObjectResult<uspBranchGetById_Result> uspBranchGetById(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBranchGetById_Result>("uspBranchGetById", branchIDParameter);
        }
    
        public virtual ObjectResult<uspBranchGetViewByID_Result> uspBranchGetViewByID(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBranchGetViewByID_Result>("uspBranchGetViewByID", branchIDParameter);
        }
    
        public virtual int uspBranchInsertUpdate(ObjectParameter branchID, string branchName, string tEBranchName, Nullable<System.DateTime> startDate, string phone, string email, string address, Nullable<int> accountantID, Nullable<System.DateTime> accountantFromDate, Nullable<int> managerID, Nullable<System.DateTime> managerFromDate, Nullable<int> userID, ObjectParameter branchCode)
        {
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var tEBranchNameParameter = tEBranchName != null ?
                new ObjectParameter("TEBranchName", tEBranchName) :
                new ObjectParameter("TEBranchName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var accountantIDParameter = accountantID.HasValue ?
                new ObjectParameter("AccountantID", accountantID) :
                new ObjectParameter("AccountantID", typeof(int));
    
            var accountantFromDateParameter = accountantFromDate.HasValue ?
                new ObjectParameter("AccountantFromDate", accountantFromDate) :
                new ObjectParameter("AccountantFromDate", typeof(System.DateTime));
    
            var managerIDParameter = managerID.HasValue ?
                new ObjectParameter("ManagerID", managerID) :
                new ObjectParameter("ManagerID", typeof(int));
    
            var managerFromDateParameter = managerFromDate.HasValue ?
                new ObjectParameter("ManagerFromDate", managerFromDate) :
                new ObjectParameter("ManagerFromDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspBranchInsertUpdate", branchID, branchNameParameter, tEBranchNameParameter, startDateParameter, phoneParameter, emailParameter, addressParameter, accountantIDParameter, accountantFromDateParameter, managerIDParameter, managerFromDateParameter, userIDParameter, branchCode);
        }
    
        public virtual ObjectResult<UspBranchNameByCode_Result> UspBranchNameByCode(string branchCode)
        {
            var branchCodeParameter = branchCode != null ?
                new ObjectParameter("BranchCode", branchCode) :
                new ObjectParameter("BranchCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspBranchNameByCode_Result>("UspBranchNameByCode", branchCodeParameter);
        }
    
        public virtual int uspClusterChangeStatus(ObjectParameter clusterID, ObjectParameter clusterCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClusterChangeStatus", clusterID, clusterCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspClusterGetAll_Result> uspClusterGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClusterGetAll_Result>("uspClusterGetAll");
        }
    
        public virtual ObjectResult<uspClusterGetByBranchID_Result> uspClusterGetByBranchID(Nullable<int> branchID)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClusterGetByBranchID_Result>("uspClusterGetByBranchID", branchIDParameter);
        }
    
        public virtual ObjectResult<uspClusterGetByID_Result> uspClusterGetByID(Nullable<int> clusterID)
        {
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClusterGetByID_Result>("uspClusterGetByID", clusterIDParameter);
        }
    
        public virtual ObjectResult<uspClusterGetViewByID_Result> uspClusterGetViewByID(Nullable<int> clusterID)
        {
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClusterGetViewByID_Result>("uspClusterGetViewByID", clusterIDParameter);
        }
    
        public virtual int uspClusterInsertUpdate(ObjectParameter clusterID, string clusterName, string tEClusterName, Nullable<System.DateTime> startDate, Nullable<int> mandalID, Nullable<int> branchID, string phone, string address, Nullable<int> leader, Nullable<System.DateTime> leaderFromDate, Nullable<int> userID, ObjectParameter clusterCode)
        {
            var clusterNameParameter = clusterName != null ?
                new ObjectParameter("ClusterName", clusterName) :
                new ObjectParameter("ClusterName", typeof(string));
    
            var tEClusterNameParameter = tEClusterName != null ?
                new ObjectParameter("TEClusterName", tEClusterName) :
                new ObjectParameter("TEClusterName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var mandalIDParameter = mandalID.HasValue ?
                new ObjectParameter("MandalID", mandalID) :
                new ObjectParameter("MandalID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var leaderParameter = leader.HasValue ?
                new ObjectParameter("Leader", leader) :
                new ObjectParameter("Leader", typeof(int));
    
            var leaderFromDateParameter = leaderFromDate.HasValue ?
                new ObjectParameter("LeaderFromDate", leaderFromDate) :
                new ObjectParameter("LeaderFromDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClusterInsertUpdate", clusterID, clusterNameParameter, tEClusterNameParameter, startDateParameter, mandalIDParameter, branchIDParameter, phoneParameter, addressParameter, leaderParameter, leaderFromDateParameter, userIDParameter, clusterCode);
        }
    
        public virtual ObjectResult<uspClusterLookup_Result> uspClusterLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspClusterLookup_Result>("uspClusterLookup");
        }
    
        public virtual int uspCreateSchedule(Nullable<int> loanMasterID, Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<decimal> penelInterestRate, Nullable<int> loanPeriod, Nullable<System.DateTime> startPaymentDate, Nullable<int> userID, Nullable<System.DateTime> calculationStartDate)
        {
            var loanMasterIDParameter = loanMasterID.HasValue ?
                new ObjectParameter("LoanMasterID", loanMasterID) :
                new ObjectParameter("LoanMasterID", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var penelInterestRateParameter = penelInterestRate.HasValue ?
                new ObjectParameter("PenelInterestRate", penelInterestRate) :
                new ObjectParameter("PenelInterestRate", typeof(decimal));
    
            var loanPeriodParameter = loanPeriod.HasValue ?
                new ObjectParameter("LoanPeriod", loanPeriod) :
                new ObjectParameter("LoanPeriod", typeof(int));
    
            var startPaymentDateParameter = startPaymentDate.HasValue ?
                new ObjectParameter("StartPaymentDate", startPaymentDate) :
                new ObjectParameter("StartPaymentDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var calculationStartDateParameter = calculationStartDate.HasValue ?
                new ObjectParameter("CalculationStartDate", calculationStartDate) :
                new ObjectParameter("CalculationStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspCreateSchedule", loanMasterIDParameter, loanAmountParameter, interestRateParameter, penelInterestRateParameter, loanPeriodParameter, startPaymentDateParameter, userIDParameter, calculationStartDateParameter);
        }
    
        public virtual ObjectResult<uspDepositInterestGetViewByID_Result> uspDepositInterestGetViewByID(Nullable<int> interestID)
        {
            var interestIDParameter = interestID.HasValue ?
                new ObjectParameter("InterestID", interestID) :
                new ObjectParameter("InterestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDepositInterestGetViewByID_Result>("uspDepositInterestGetViewByID", interestIDParameter);
        }
    
        public virtual ObjectResult<uspDepreciation_Result> uspDepreciation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDepreciation_Result>("uspDepreciation");
        }
    
        public virtual int uspDistrictChangeStatus(ObjectParameter districtID, ObjectParameter districtCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictChangeStatus", districtID, districtCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspDistrictGetAll_Result> uspDistrictGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictGetAll_Result>("uspDistrictGetAll");
        }
    
        public virtual ObjectResult<uspDistrictGetByDistrictId_Result> uspDistrictGetByDistrictId(Nullable<int> districtID)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictGetByDistrictId_Result>("uspDistrictGetByDistrictId", districtIDParameter);
        }
    
        public virtual int uspDistrictInsertUpdate(ObjectParameter districtID, string district, string tEDistrictName, Nullable<int> stateID, Nullable<int> userID, ObjectParameter districtCode)
        {
            var districtParameter = district != null ?
                new ObjectParameter("District", district) :
                new ObjectParameter("District", typeof(string));
    
            var tEDistrictNameParameter = tEDistrictName != null ?
                new ObjectParameter("TEDistrictName", tEDistrictName) :
                new ObjectParameter("TEDistrictName", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictInsertUpdate", districtID, districtParameter, tEDistrictNameParameter, stateIDParameter, userIDParameter, districtCode);
        }
    
        public virtual ObjectResult<uspDistrictLookup_Result> uspDistrictLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspDistrictLookup_Result>("uspDistrictLookup");
        }
    
        public virtual int uspEmployeeChangeStatus(ObjectParameter employeeID, ObjectParameter employeeCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeChangeStatus", employeeID, employeeCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<UspEmployeeClusterGetEmployee_Result> UspEmployeeClusterGetEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspEmployeeClusterGetEmployee_Result>("UspEmployeeClusterGetEmployee");
        }
    
        public virtual int uspEmployeeFamilyDetailsUpdate(Nullable<int> employeeID, string nomineeName, Nullable<int> nomineeRelationship, string parentGuardianName, Nullable<int> parentGuardianRelationship, Nullable<int> socialCategory, Nullable<int> familyIncome, Nullable<byte> earningMembersInFamily, Nullable<byte> nonEarningMembersInFamily, Nullable<decimal> assetsInNameOfEmployee, Nullable<int> userID, Nullable<System.DateTime> dateOfRetirement, Nullable<int> religion)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var nomineeNameParameter = nomineeName != null ?
                new ObjectParameter("NomineeName", nomineeName) :
                new ObjectParameter("NomineeName", typeof(string));
    
            var nomineeRelationshipParameter = nomineeRelationship.HasValue ?
                new ObjectParameter("NomineeRelationship", nomineeRelationship) :
                new ObjectParameter("NomineeRelationship", typeof(int));
    
            var parentGuardianNameParameter = parentGuardianName != null ?
                new ObjectParameter("ParentGuardianName", parentGuardianName) :
                new ObjectParameter("ParentGuardianName", typeof(string));
    
            var parentGuardianRelationshipParameter = parentGuardianRelationship.HasValue ?
                new ObjectParameter("ParentGuardianRelationship", parentGuardianRelationship) :
                new ObjectParameter("ParentGuardianRelationship", typeof(int));
    
            var socialCategoryParameter = socialCategory.HasValue ?
                new ObjectParameter("SocialCategory", socialCategory) :
                new ObjectParameter("SocialCategory", typeof(int));
    
            var familyIncomeParameter = familyIncome.HasValue ?
                new ObjectParameter("FamilyIncome", familyIncome) :
                new ObjectParameter("FamilyIncome", typeof(int));
    
            var earningMembersInFamilyParameter = earningMembersInFamily.HasValue ?
                new ObjectParameter("EarningMembersInFamily", earningMembersInFamily) :
                new ObjectParameter("EarningMembersInFamily", typeof(byte));
    
            var nonEarningMembersInFamilyParameter = nonEarningMembersInFamily.HasValue ?
                new ObjectParameter("NonEarningMembersInFamily", nonEarningMembersInFamily) :
                new ObjectParameter("NonEarningMembersInFamily", typeof(byte));
    
            var assetsInNameOfEmployeeParameter = assetsInNameOfEmployee.HasValue ?
                new ObjectParameter("AssetsInNameOfEmployee", assetsInNameOfEmployee) :
                new ObjectParameter("AssetsInNameOfEmployee", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateOfRetirementParameter = dateOfRetirement.HasValue ?
                new ObjectParameter("DateOfRetirement", dateOfRetirement) :
                new ObjectParameter("DateOfRetirement", typeof(System.DateTime));
    
            var religionParameter = religion.HasValue ?
                new ObjectParameter("Religion", religion) :
                new ObjectParameter("Religion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeFamilyDetailsUpdate", employeeIDParameter, nomineeNameParameter, nomineeRelationshipParameter, parentGuardianNameParameter, parentGuardianRelationshipParameter, socialCategoryParameter, familyIncomeParameter, earningMembersInFamilyParameter, nonEarningMembersInFamilyParameter, assetsInNameOfEmployeeParameter, userIDParameter, dateOfRetirementParameter, religionParameter);
        }
    
        public virtual int uspEmployeeInsertUpdate(ObjectParameter employeeID, ObjectParameter employeeCode, string employeeRefCode, string surName, string tESurName, string employeeName, string tEEmployeeName, string photo, Nullable<int> branchID, Nullable<int> clusterID, string gender, Nullable<System.DateTime> dOJ, Nullable<int> educationQualification, string mobileNumber, string email, Nullable<System.DateTime> dOB, Nullable<int> designation, Nullable<System.DateTime> designationFromDate, Nullable<System.DateTime> designationToDate, Nullable<bool> disability, Nullable<int> bloodGroup, string maritalStatus, Nullable<int> socialCategory, string presentAddress, string permanentAddress, string emergencyContactNumber, string emergencyContactName, Nullable<int> userID, Nullable<int> religion, Nullable<System.DateTime> dateOfRetirement)
        {
            var employeeRefCodeParameter = employeeRefCode != null ?
                new ObjectParameter("EmployeeRefCode", employeeRefCode) :
                new ObjectParameter("EmployeeRefCode", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("SurName", surName) :
                new ObjectParameter("SurName", typeof(string));
    
            var tESurNameParameter = tESurName != null ?
                new ObjectParameter("TESurName", tESurName) :
                new ObjectParameter("TESurName", typeof(string));
    
            var employeeNameParameter = employeeName != null ?
                new ObjectParameter("EmployeeName", employeeName) :
                new ObjectParameter("EmployeeName", typeof(string));
    
            var tEEmployeeNameParameter = tEEmployeeName != null ?
                new ObjectParameter("TEEmployeeName", tEEmployeeName) :
                new ObjectParameter("TEEmployeeName", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOJParameter = dOJ.HasValue ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(System.DateTime));
    
            var educationQualificationParameter = educationQualification.HasValue ?
                new ObjectParameter("EducationQualification", educationQualification) :
                new ObjectParameter("EducationQualification", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var designationParameter = designation.HasValue ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(int));
    
            var designationFromDateParameter = designationFromDate.HasValue ?
                new ObjectParameter("DesignationFromDate", designationFromDate) :
                new ObjectParameter("DesignationFromDate", typeof(System.DateTime));
    
            var designationToDateParameter = designationToDate.HasValue ?
                new ObjectParameter("DesignationToDate", designationToDate) :
                new ObjectParameter("DesignationToDate", typeof(System.DateTime));
    
            var disabilityParameter = disability.HasValue ?
                new ObjectParameter("Disability", disability) :
                new ObjectParameter("Disability", typeof(bool));
    
            var bloodGroupParameter = bloodGroup.HasValue ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(int));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var socialCategoryParameter = socialCategory.HasValue ?
                new ObjectParameter("SocialCategory", socialCategory) :
                new ObjectParameter("SocialCategory", typeof(int));
    
            var presentAddressParameter = presentAddress != null ?
                new ObjectParameter("PresentAddress", presentAddress) :
                new ObjectParameter("PresentAddress", typeof(string));
    
            var permanentAddressParameter = permanentAddress != null ?
                new ObjectParameter("PermanentAddress", permanentAddress) :
                new ObjectParameter("PermanentAddress", typeof(string));
    
            var emergencyContactNumberParameter = emergencyContactNumber != null ?
                new ObjectParameter("EmergencyContactNumber", emergencyContactNumber) :
                new ObjectParameter("EmergencyContactNumber", typeof(string));
    
            var emergencyContactNameParameter = emergencyContactName != null ?
                new ObjectParameter("EmergencyContactName", emergencyContactName) :
                new ObjectParameter("EmergencyContactName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var religionParameter = religion.HasValue ?
                new ObjectParameter("Religion", religion) :
                new ObjectParameter("Religion", typeof(int));
    
            var dateOfRetirementParameter = dateOfRetirement.HasValue ?
                new ObjectParameter("DateOfRetirement", dateOfRetirement) :
                new ObjectParameter("DateOfRetirement", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeInsertUpdate", employeeID, employeeCode, employeeRefCodeParameter, surNameParameter, tESurNameParameter, employeeNameParameter, tEEmployeeNameParameter, photoParameter, branchIDParameter, clusterIDParameter, genderParameter, dOJParameter, educationQualificationParameter, mobileNumberParameter, emailParameter, dOBParameter, designationParameter, designationFromDateParameter, designationToDateParameter, disabilityParameter, bloodGroupParameter, maritalStatusParameter, socialCategoryParameter, presentAddressParameter, permanentAddressParameter, emergencyContactNumberParameter, emergencyContactNameParameter, userIDParameter, religionParameter, dateOfRetirementParameter);
        }
    
        public virtual ObjectResult<uspEmployeeKYCGetByEmployeeID_Result> uspEmployeeKYCGetByEmployeeID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeKYCGetByEmployeeID_Result>("uspEmployeeKYCGetByEmployeeID", employeeIDParameter);
        }
    
        public virtual ObjectResult<uspEmployeeKYCGetByEmployeeKYCID_Result> uspEmployeeKYCGetByEmployeeKYCID(Nullable<int> employeeKYCID)
        {
            var employeeKYCIDParameter = employeeKYCID.HasValue ?
                new ObjectParameter("EmployeeKYCID", employeeKYCID) :
                new ObjectParameter("EmployeeKYCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeKYCGetByEmployeeKYCID_Result>("uspEmployeeKYCGetByEmployeeKYCID", employeeKYCIDParameter);
        }
    
        public virtual int uspEmployeeKYCInsertUpdate(ObjectParameter employeeKYCID, Nullable<int> employeeID, Nullable<int> kYCType, string kYCNumber, string fileName, string actualFileName, Nullable<int> statusID, Nullable<int> userID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var kYCTypeParameter = kYCType.HasValue ?
                new ObjectParameter("KYCType", kYCType) :
                new ObjectParameter("KYCType", typeof(int));
    
            var kYCNumberParameter = kYCNumber != null ?
                new ObjectParameter("KYCNumber", kYCNumber) :
                new ObjectParameter("KYCNumber", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var actualFileNameParameter = actualFileName != null ?
                new ObjectParameter("ActualFileName", actualFileName) :
                new ObjectParameter("ActualFileName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeKYCInsertUpdate", employeeKYCID, employeeIDParameter, kYCTypeParameter, kYCNumberParameter, fileNameParameter, actualFileNameParameter, statusIDParameter, userIDParameter);
        }
    
        public virtual int uspEmployeeLoginDetailsUpdate(Nullable<int> employeeID, Nullable<int> roleId, string loginUserName, string loginPassWord, Nullable<int> userID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var loginUserNameParameter = loginUserName != null ?
                new ObjectParameter("LoginUserName", loginUserName) :
                new ObjectParameter("LoginUserName", typeof(string));
    
            var loginPassWordParameter = loginPassWord != null ?
                new ObjectParameter("LoginPassWord", loginPassWord) :
                new ObjectParameter("LoginPassWord", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeLoginDetailsUpdate", employeeIDParameter, roleIdParameter, loginUserNameParameter, loginPassWordParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspFederationGeneralPaymentsLookup_Result> uspFederationGeneralPaymentsLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationGeneralPaymentsLookup_Result>("uspFederationGeneralPaymentsLookup");
        }
    
        public virtual ObjectResult<uspFederationMeetingGetAll_Result> uspFederationMeetingGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationMeetingGetAll_Result>("uspFederationMeetingGetAll");
        }
    
        public virtual int uspFundSourceChangeStatus(ObjectParameter fundSourceID, ObjectParameter fundSourceCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFundSourceChangeStatus", fundSourceID, fundSourceCode, statusCode, userIdParameter);
        }
    
        public virtual int uspFundSourceDelete(ObjectParameter fundSourceID, ObjectParameter fundSourceCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFundSourceDelete", fundSourceID, fundSourceCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspFundSourceLookup_Result> uspFundSourceLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFundSourceLookup_Result>("uspFundSourceLookup");
        }
    
        public virtual int uspGeneralPaymentsChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneralPaymentsChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspGeneralPaymentsDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneralPaymentsDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual int uspGenerateBranchCode(Nullable<int> orgId, ObjectParameter sno, ObjectParameter branchCode)
        {
            var orgIdParameter = orgId.HasValue ?
                new ObjectParameter("OrgId", orgId) :
                new ObjectParameter("OrgId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateBranchCode", orgIdParameter, sno, branchCode);
        }
    
        public virtual int uspGenerateClusterCode(Nullable<int> branchID, ObjectParameter sno, ObjectParameter clusterCode)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateClusterCode", branchIDParameter, sno, clusterCode);
        }
    
        public virtual int uspGenerateDistrictCode(ObjectParameter sno, ObjectParameter districtCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateDistrictCode", sno, districtCode);
        }
    
        public virtual int uspGenerateFederationCode(ObjectParameter sno, ObjectParameter organizationCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateFederationCode", sno, organizationCode);
        }
    
        public virtual int uspGenerateGroupCode(Nullable<int> clusterId, ObjectParameter sno, ObjectParameter groupCode)
        {
            var clusterIdParameter = clusterId.HasValue ?
                new ObjectParameter("ClusterId", clusterId) :
                new ObjectParameter("ClusterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateGroupCode", clusterIdParameter, sno, groupCode);
        }
    
        public virtual int uspGenerateInterestMasterCode(string interestType, ObjectParameter sno, ObjectParameter interestCode)
        {
            var interestTypeParameter = interestType != null ?
                new ObjectParameter("InterestType", interestType) :
                new ObjectParameter("InterestType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateInterestMasterCode", interestTypeParameter, sno, interestCode);
        }
    
        public virtual int uspGenerateMandalCode(Nullable<int> districtId, ObjectParameter sno, ObjectParameter mandalCode)
        {
            var districtIdParameter = districtId.HasValue ?
                new ObjectParameter("DistrictId", districtId) :
                new ObjectParameter("DistrictId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateMandalCode", districtIdParameter, sno, mandalCode);
        }
    
        public virtual int uspGenerateMemberCode(Nullable<int> groupId, ObjectParameter sno, ObjectParameter memberCode)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateMemberCode", groupIdParameter, sno, memberCode);
        }
    
        public virtual int uspGenerateObjectCodeByEntityCode(string entityCode, ObjectParameter sno, ObjectParameter objectCode)
        {
            var entityCodeParameter = entityCode != null ?
                new ObjectParameter("EntityCode", entityCode) :
                new ObjectParameter("EntityCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateObjectCodeByEntityCode", entityCodeParameter, sno, objectCode);
        }
    
        public virtual int uspGeneratePanchayatCode(Nullable<int> villageId, ObjectParameter sno, ObjectParameter panchayatCode)
        {
            var villageIdParameter = villageId.HasValue ?
                new ObjectParameter("VillageId", villageId) :
                new ObjectParameter("VillageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneratePanchayatCode", villageIdParameter, sno, panchayatCode);
        }
    
        public virtual int uspGenerateSlAccount(Nullable<int> principalAHId, Nullable<int> loanMasterId, Nullable<decimal> loanAmount, Nullable<int> userID, string sLAccountName, string aH_ORIGIN_CODE, Nullable<int> aH_ORIGIN_ID, ObjectParameter sLAHID)
        {
            var principalAHIdParameter = principalAHId.HasValue ?
                new ObjectParameter("PrincipalAHId", principalAHId) :
                new ObjectParameter("PrincipalAHId", typeof(int));
    
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var sLAccountNameParameter = sLAccountName != null ?
                new ObjectParameter("SLAccountName", sLAccountName) :
                new ObjectParameter("SLAccountName", typeof(string));
    
            var aH_ORIGIN_CODEParameter = aH_ORIGIN_CODE != null ?
                new ObjectParameter("AH_ORIGIN_CODE", aH_ORIGIN_CODE) :
                new ObjectParameter("AH_ORIGIN_CODE", typeof(string));
    
            var aH_ORIGIN_IDParameter = aH_ORIGIN_ID.HasValue ?
                new ObjectParameter("AH_ORIGIN_ID", aH_ORIGIN_ID) :
                new ObjectParameter("AH_ORIGIN_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateSlAccount", principalAHIdParameter, loanMasterIdParameter, loanAmountParameter, userIDParameter, sLAccountNameParameter, aH_ORIGIN_CODEParameter, aH_ORIGIN_IDParameter, sLAHID);
        }
    
        public virtual int uspGenerateSLANumber(Nullable<int> loanMasterId, Nullable<int> principalAHID, Nullable<bool> isFederation, Nullable<decimal> disbAmount, Nullable<int> userId, ObjectParameter name)
        {
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            var principalAHIDParameter = principalAHID.HasValue ?
                new ObjectParameter("PrincipalAHID", principalAHID) :
                new ObjectParameter("PrincipalAHID", typeof(int));
    
            var isFederationParameter = isFederation.HasValue ?
                new ObjectParameter("IsFederation", isFederation) :
                new ObjectParameter("IsFederation", typeof(bool));
    
            var disbAmountParameter = disbAmount.HasValue ?
                new ObjectParameter("DisbAmount", disbAmount) :
                new ObjectParameter("DisbAmount", typeof(decimal));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateSLANumber", loanMasterIdParameter, principalAHIDParameter, isFederationParameter, disbAmountParameter, userIdParameter, name);
        }
    
        public virtual int uspGenerateVillageCode(Nullable<int> mandalId, ObjectParameter sno, ObjectParameter villageCode)
        {
            var mandalIdParameter = mandalId.HasValue ?
                new ObjectParameter("MandalId", mandalId) :
                new ObjectParameter("MandalId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGenerateVillageCode", mandalIdParameter, sno, villageCode);
        }
    
        public virtual int uspGetAccountHeadsForJV(Nullable<bool> isFedaration)
        {
            var isFedarationParameter = isFedaration.HasValue ?
                new ObjectParameter("IsFedaration", isFedaration) :
                new ObjectParameter("IsFedaration", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetAccountHeadsForJV", isFedarationParameter);
        }
    
        public virtual ObjectResult<uspGetAllBankMaster_Result> uspGetAllBankMaster(Nullable<int> bankEntryID)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllBankMaster_Result>("uspGetAllBankMaster", bankEntryIDParameter);
        }
    
        public virtual ObjectResult<string> uspGetBankNameByAccountNumber(Nullable<int> bankEntryID)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetBankNameByAccountNumber", bankEntryIDParameter);
        }
    
        public virtual int uspGetCustomerByID(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCustomerByID", customerIDParameter);
        }
    
        public virtual int uspGetCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetCustomers");
        }
    
        public virtual int uspGetEmi(Nullable<decimal> loanAmount, Nullable<decimal> interestRate, Nullable<int> loanPeriod, Nullable<System.DateTime> startPaymentDate, Nullable<System.DateTime> calculationStartDate)
        {
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var interestRateParameter = interestRate.HasValue ?
                new ObjectParameter("InterestRate", interestRate) :
                new ObjectParameter("InterestRate", typeof(decimal));
    
            var loanPeriodParameter = loanPeriod.HasValue ?
                new ObjectParameter("LoanPeriod", loanPeriod) :
                new ObjectParameter("LoanPeriod", typeof(int));
    
            var startPaymentDateParameter = startPaymentDate.HasValue ?
                new ObjectParameter("StartPaymentDate", startPaymentDate) :
                new ObjectParameter("StartPaymentDate", typeof(System.DateTime));
    
            var calculationStartDateParameter = calculationStartDate.HasValue ?
                new ObjectParameter("CalculationStartDate", calculationStartDate) :
                new ObjectParameter("CalculationStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetEmi", loanAmountParameter, interestRateParameter, loanPeriodParameter, startPaymentDateParameter, calculationStartDateParameter);
        }
    
        public virtual ObjectResult<uspGetInterestRates_Result> uspGetInterestRates(Nullable<int> groupID, Nullable<int> principleAHID, string flag, Nullable<int> loanMasterId)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var principleAHIDParameter = principleAHID.HasValue ?
                new ObjectParameter("PrincipleAHID", principleAHID) :
                new ObjectParameter("PrincipleAHID", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetInterestRates_Result>("uspGetInterestRates", groupIDParameter, principleAHIDParameter, flagParameter, loanMasterIdParameter);
        }
    
        public virtual ObjectResult<uspGetLeadershipLevel_Result> uspGetLeadershipLevel()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLeadershipLevel_Result>("uspGetLeadershipLevel");
        }
    
        public virtual ObjectResult<uspGetMasterDetailsByCode_Result> uspGetMasterDetailsByCode(string refMasterCode)
        {
            var refMasterCodeParameter = refMasterCode != null ?
                new ObjectParameter("RefMasterCode", refMasterCode) :
                new ObjectParameter("RefMasterCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMasterDetailsByCode_Result>("uspGetMasterDetailsByCode", refMasterCodeParameter);
        }
    
        public virtual ObjectResult<uspGetModuleActionsByModuleID_Result> uspGetModuleActionsByModuleID(Nullable<int> moduleId)
        {
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetModuleActionsByModuleID_Result>("uspGetModuleActionsByModuleID", moduleIdParameter);
        }
    
        public virtual ObjectResult<uspGetNPADetails_Result> uspGetNPADetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetNPADetails_Result>("uspGetNPADetails");
        }
    
        public virtual ObjectResult<uspGetRAPByType_Result> uspGetRAPByType(Nullable<bool> isGroup)
        {
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRAPByType_Result>("uspGetRAPByType", isGroupParameter);
        }
    
        public virtual ObjectResult<uspGetRoles_Result> uspGetRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRoles_Result>("uspGetRoles");
        }
    
        public virtual ObjectResult<uspGroupBankDetails_Result> uspGroupBankDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupBankDetails_Result>("uspGroupBankDetails");
        }
    
        public virtual int uspGroupBanksInsertUpdate(Nullable<long> groupID, Nullable<int> userId, string groupBankXML)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var groupBankXMLParameter = groupBankXML != null ?
                new ObjectParameter("GroupBankXML", groupBankXML) :
                new ObjectParameter("GroupBankXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupBanksInsertUpdate", groupIDParameter, userIdParameter, groupBankXMLParameter);
        }
    
        public virtual ObjectResult<uspGroupEmployeeGetALL_Result> uspGroupEmployeeGetALL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupEmployeeGetALL_Result>("uspGroupEmployeeGetALL");
        }
    
        public virtual ObjectResult<uspGroupEmployeeGetByClusterID_Result> uspGroupEmployeeGetByClusterID(Nullable<int> clusterID)
        {
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupEmployeeGetByClusterID_Result>("uspGroupEmployeeGetByClusterID", clusterIDParameter);
        }
    
        public virtual ObjectResult<uspGroupEmployeeGetByGroupID_Result> uspGroupEmployeeGetByGroupID(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupEmployeeGetByGroupID_Result>("uspGroupEmployeeGetByGroupID", groupIDParameter);
        }
    
        public virtual ObjectResult<uspGroupGetAll_Result> uspGroupGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGetAll_Result>("uspGroupGetAll");
        }
    
        public virtual ObjectResult<uspgroupGetAllBanksDetails_Result> uspgroupGetAllBanksDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspgroupGetAllBanksDetails_Result>("uspgroupGetAllBanksDetails");
        }
    
        public virtual ObjectResult<uspGroupGetViewByID_Result> uspGroupGetViewByID(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGetViewByID_Result>("uspGroupGetViewByID", groupIDParameter);
        }
    
        public virtual int uspGroupLoanApplicationChangeStatus(ObjectParameter loanmasterId, ObjectParameter loanCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupLoanApplicationChangeStatus", loanmasterId, loanCode, statusCode, userIdParameter);
        }
    
        public virtual int uspGroupLoanApplicationDelete(ObjectParameter loanMasterID, ObjectParameter loanCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupLoanApplicationDelete", loanMasterID, loanCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspGroupLoanApplicationGetAll_Result> uspGroupLoanApplicationGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLoanApplicationGetAll_Result>("uspGroupLoanApplicationGetAll");
        }
    
        public virtual ObjectResult<uspGroupLoanApplicationLookup_Result> uspGroupLoanApplicationLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLoanApplicationLookup_Result>("uspGroupLoanApplicationLookup");
        }
    
        public virtual int uspGroupLoanDepositInterestRates(Nullable<long> groupID, Nullable<int> userId, string groupLoanInterestXML, string interestType)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var groupLoanInterestXMLParameter = groupLoanInterestXML != null ?
                new ObjectParameter("GroupLoanInterestXML", groupLoanInterestXML) :
                new ObjectParameter("GroupLoanInterestXML", typeof(string));
    
            var interestTypeParameter = interestType != null ?
                new ObjectParameter("InterestType", interestType) :
                new ObjectParameter("InterestType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupLoanDepositInterestRates", groupIDParameter, userIdParameter, groupLoanInterestXMLParameter, interestTypeParameter);
        }
    
        public virtual ObjectResult<uspGroupNameGetByClusterID_Result> uspGroupNameGetByClusterID(Nullable<int> clusterID)
        {
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupNameGetByClusterID_Result>("uspGroupNameGetByClusterID", clusterIDParameter);
        }
    
        public virtual ObjectResult<uspGroupNameGetByVillageID_Result> uspGroupNameGetByVillageID(Nullable<int> villageID)
        {
            var villageIDParameter = villageID.HasValue ?
                new ObjectParameter("VillageID", villageID) :
                new ObjectParameter("VillageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupNameGetByVillageID_Result>("uspGroupNameGetByVillageID", villageIDParameter);
        }
    
        public virtual int uspGroupReceiptChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupReceiptChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspGroupReceiptDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupReceiptDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual int uspInsertUpdateBankMaster(Nullable<int> bankEntryID, string bankCode, Nullable<int> bankName, string branchName, string iFSC, string accountNumber, Nullable<int> accountType, string contactNumber, string email, string address, Nullable<bool> isMasterEntry)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            var bankCodeParameter = bankCode != null ?
                new ObjectParameter("BankCode", bankCode) :
                new ObjectParameter("BankCode", typeof(string));
    
            var bankNameParameter = bankName.HasValue ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var iFSCParameter = iFSC != null ?
                new ObjectParameter("IFSC", iFSC) :
                new ObjectParameter("IFSC", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var accountTypeParameter = accountType.HasValue ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(int));
    
            var contactNumberParameter = contactNumber != null ?
                new ObjectParameter("ContactNumber", contactNumber) :
                new ObjectParameter("ContactNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var isMasterEntryParameter = isMasterEntry.HasValue ?
                new ObjectParameter("isMasterEntry", isMasterEntry) :
                new ObjectParameter("isMasterEntry", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateBankMaster", bankEntryIDParameter, bankCodeParameter, bankNameParameter, branchNameParameter, iFSCParameter, accountNumberParameter, accountTypeParameter, contactNumberParameter, emailParameter, addressParameter, isMasterEntryParameter);
        }
    
        public virtual int uspInsertUpdateCustomers(Nullable<int> customerID, string contactName, string companyName)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var contactNameParameter = contactName != null ?
                new ObjectParameter("ContactName", contactName) :
                new ObjectParameter("ContactName", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUpdateCustomers", customerIDParameter, contactNameParameter, companyNameParameter);
        }
    
        public virtual ObjectResult<uspInterestByID_Result> uspInterestByID(Nullable<int> interestID)
        {
            var interestIDParameter = interestID.HasValue ?
                new ObjectParameter("InterestID", interestID) :
                new ObjectParameter("InterestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInterestByID_Result>("uspInterestByID", interestIDParameter);
        }
    
        public virtual int uspInterestChangeStatus(ObjectParameter interestID, ObjectParameter interestCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInterestChangeStatus", interestID, interestCode, statusCode, userIdParameter);
        }
    
        public virtual int uspInterestInsertUpdate(ObjectParameter interestID, string interestName, Nullable<int> principalAHID, Nullable<int> interestAHID, Nullable<int> penalAHID, Nullable<int> @base, Nullable<int> caluculationMethod, string type, Nullable<int> userID, string interestRatesXML, ObjectParameter interestCode)
        {
            var interestNameParameter = interestName != null ?
                new ObjectParameter("InterestName", interestName) :
                new ObjectParameter("InterestName", typeof(string));
    
            var principalAHIDParameter = principalAHID.HasValue ?
                new ObjectParameter("PrincipalAHID", principalAHID) :
                new ObjectParameter("PrincipalAHID", typeof(int));
    
            var interestAHIDParameter = interestAHID.HasValue ?
                new ObjectParameter("InterestAHID", interestAHID) :
                new ObjectParameter("InterestAHID", typeof(int));
    
            var penalAHIDParameter = penalAHID.HasValue ?
                new ObjectParameter("PenalAHID", penalAHID) :
                new ObjectParameter("PenalAHID", typeof(int));
    
            var baseParameter = @base.HasValue ?
                new ObjectParameter("Base", @base) :
                new ObjectParameter("Base", typeof(int));
    
            var caluculationMethodParameter = caluculationMethod.HasValue ?
                new ObjectParameter("CaluculationMethod", caluculationMethod) :
                new ObjectParameter("CaluculationMethod", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var interestRatesXMLParameter = interestRatesXML != null ?
                new ObjectParameter("InterestRatesXML", interestRatesXML) :
                new ObjectParameter("InterestRatesXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInterestInsertUpdate", interestID, interestNameParameter, principalAHIDParameter, interestAHIDParameter, penalAHIDParameter, baseParameter, caluculationMethodParameter, typeParameter, userIDParameter, interestRatesXMLParameter, interestCode);
        }
    
        public virtual int uspJournalEntryChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspJournalEntryChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspJournalEntryDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspJournalEntryDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual int uspLeadershipChangeStatus(ObjectParameter leadershipID, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLeadershipChangeStatus", leadershipID, statusCode, userIdParameter);
        }
    
        public virtual int uspLeadershipDelete(ObjectParameter leadershipID, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLeadershipDelete", leadershipID, userIdParameter);
        }
    
        public virtual ObjectResult<uspLeadershipGetById_Result> uspLeadershipGetById(Nullable<int> leadershipID)
        {
            var leadershipIDParameter = leadershipID.HasValue ?
                new ObjectParameter("LeadershipID", leadershipID) :
                new ObjectParameter("LeadershipID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLeadershipGetById_Result>("uspLeadershipGetById", leadershipIDParameter);
        }
    
        public virtual int uspLeadershipInsertUpdate(ObjectParameter leadershipID, Nullable<int> leadershipLevel, Nullable<int> objectID, Nullable<int> leadershipTitle, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> memberID, Nullable<int> statusID, Nullable<int> userID)
        {
            var leadershipLevelParameter = leadershipLevel.HasValue ?
                new ObjectParameter("LeadershipLevel", leadershipLevel) :
                new ObjectParameter("LeadershipLevel", typeof(int));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(int));
    
            var leadershipTitleParameter = leadershipTitle.HasValue ?
                new ObjectParameter("LeadershipTitle", leadershipTitle) :
                new ObjectParameter("LeadershipTitle", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLeadershipInsertUpdate", leadershipID, leadershipLevelParameter, objectIDParameter, leadershipTitleParameter, fromDateParameter, toDateParameter, memberIDParameter, statusIDParameter, userIDParameter);
        }
    
        public virtual int uspLoandDisbursementInsertDetails(Nullable<byte> noofInstallments, Nullable<decimal> disbursedAmount, Nullable<System.DateTime> disbursedDate, Nullable<int> dueDays, Nullable<System.DateTime> installmentStartDate, Nullable<System.DateTime> installmentEndDate, Nullable<decimal> monthlyPrincipalDemand, Nullable<int> projectId, string refNo, Nullable<int> loanMasterId, Nullable<int> groupId, Nullable<int> principalAHId, Nullable<int> userId, Nullable<bool> isFederation, string sLAccountName, Nullable<decimal> outStandingAmount, Nullable<int> interestMasterID)
        {
            var noofInstallmentsParameter = noofInstallments.HasValue ?
                new ObjectParameter("NoofInstallments", noofInstallments) :
                new ObjectParameter("NoofInstallments", typeof(byte));
    
            var disbursedAmountParameter = disbursedAmount.HasValue ?
                new ObjectParameter("DisbursedAmount", disbursedAmount) :
                new ObjectParameter("DisbursedAmount", typeof(decimal));
    
            var disbursedDateParameter = disbursedDate.HasValue ?
                new ObjectParameter("DisbursedDate", disbursedDate) :
                new ObjectParameter("DisbursedDate", typeof(System.DateTime));
    
            var dueDaysParameter = dueDays.HasValue ?
                new ObjectParameter("DueDays", dueDays) :
                new ObjectParameter("DueDays", typeof(int));
    
            var installmentStartDateParameter = installmentStartDate.HasValue ?
                new ObjectParameter("InstallmentStartDate", installmentStartDate) :
                new ObjectParameter("InstallmentStartDate", typeof(System.DateTime));
    
            var installmentEndDateParameter = installmentEndDate.HasValue ?
                new ObjectParameter("InstallmentEndDate", installmentEndDate) :
                new ObjectParameter("InstallmentEndDate", typeof(System.DateTime));
    
            var monthlyPrincipalDemandParameter = monthlyPrincipalDemand.HasValue ?
                new ObjectParameter("MonthlyPrincipalDemand", monthlyPrincipalDemand) :
                new ObjectParameter("MonthlyPrincipalDemand", typeof(decimal));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var principalAHIdParameter = principalAHId.HasValue ?
                new ObjectParameter("PrincipalAHId", principalAHId) :
                new ObjectParameter("PrincipalAHId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var isFederationParameter = isFederation.HasValue ?
                new ObjectParameter("IsFederation", isFederation) :
                new ObjectParameter("IsFederation", typeof(bool));
    
            var sLAccountNameParameter = sLAccountName != null ?
                new ObjectParameter("SLAccountName", sLAccountName) :
                new ObjectParameter("SLAccountName", typeof(string));
    
            var outStandingAmountParameter = outStandingAmount.HasValue ?
                new ObjectParameter("OutStandingAmount", outStandingAmount) :
                new ObjectParameter("OutStandingAmount", typeof(decimal));
    
            var interestMasterIDParameter = interestMasterID.HasValue ?
                new ObjectParameter("InterestMasterID", interestMasterID) :
                new ObjectParameter("InterestMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoandDisbursementInsertDetails", noofInstallmentsParameter, disbursedAmountParameter, disbursedDateParameter, dueDaysParameter, installmentStartDateParameter, installmentEndDateParameter, monthlyPrincipalDemandParameter, projectIdParameter, refNoParameter, loanMasterIdParameter, groupIdParameter, principalAHIdParameter, userIdParameter, isFederationParameter, sLAccountNameParameter, outStandingAmountParameter, interestMasterIDParameter);
        }
    
        public virtual ObjectResult<uspLoanDisbursementDetailsByLoanMasterId_Result> uspLoanDisbursementDetailsByLoanMasterId(Nullable<int> loanMasterId, string flag)
        {
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanDisbursementDetailsByLoanMasterId_Result>("uspLoanDisbursementDetailsByLoanMasterId", loanMasterIdParameter, flagParameter);
        }
    
        public virtual int uspLoanDisbursementSecurities(string loanSecurityIDS, string description, Nullable<int> loanMasterId, Nullable<int> createdBy)
        {
            var loanSecurityIDSParameter = loanSecurityIDS != null ?
                new ObjectParameter("LoanSecurityIDS", loanSecurityIDS) :
                new ObjectParameter("LoanSecurityIDS", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanDisbursementSecurities", loanSecurityIDSParameter, descriptionParameter, loanMasterIdParameter, createdByParameter);
        }
    
        public virtual int uspLoanDisbursementUpdate(Nullable<int> loanMasterID, Nullable<decimal> disbursedAmount, Nullable<byte> noOfInstallments, Nullable<System.DateTime> disbursementDate, string sLAccountNumber, Nullable<int> groupInterstRateID, Nullable<int> interestRateID, Nullable<decimal> xROI, Nullable<decimal> xPROI, Nullable<System.DateTime> installmentStartFrom, Nullable<decimal> monthlyPrincipalDemand, Nullable<int> fundSourceID, Nullable<int> projectID, string loanRefNumber, string vocherType, string accountNumber, Nullable<int> bankName, string chequeNumber, Nullable<System.DateTime> vocherDate, Nullable<System.DateTime> loanClosingDate, Nullable<int> loanClosedBy, Nullable<int> userId)
        {
            var loanMasterIDParameter = loanMasterID.HasValue ?
                new ObjectParameter("LoanMasterID", loanMasterID) :
                new ObjectParameter("LoanMasterID", typeof(int));
    
            var disbursedAmountParameter = disbursedAmount.HasValue ?
                new ObjectParameter("DisbursedAmount", disbursedAmount) :
                new ObjectParameter("DisbursedAmount", typeof(decimal));
    
            var noOfInstallmentsParameter = noOfInstallments.HasValue ?
                new ObjectParameter("NoOfInstallments", noOfInstallments) :
                new ObjectParameter("NoOfInstallments", typeof(byte));
    
            var disbursementDateParameter = disbursementDate.HasValue ?
                new ObjectParameter("DisbursementDate", disbursementDate) :
                new ObjectParameter("DisbursementDate", typeof(System.DateTime));
    
            var sLAccountNumberParameter = sLAccountNumber != null ?
                new ObjectParameter("SLAccountNumber", sLAccountNumber) :
                new ObjectParameter("SLAccountNumber", typeof(string));
    
            var groupInterstRateIDParameter = groupInterstRateID.HasValue ?
                new ObjectParameter("GroupInterstRateID", groupInterstRateID) :
                new ObjectParameter("GroupInterstRateID", typeof(int));
    
            var interestRateIDParameter = interestRateID.HasValue ?
                new ObjectParameter("InterestRateID", interestRateID) :
                new ObjectParameter("InterestRateID", typeof(int));
    
            var xROIParameter = xROI.HasValue ?
                new ObjectParameter("XROI", xROI) :
                new ObjectParameter("XROI", typeof(decimal));
    
            var xPROIParameter = xPROI.HasValue ?
                new ObjectParameter("XPROI", xPROI) :
                new ObjectParameter("XPROI", typeof(decimal));
    
            var installmentStartFromParameter = installmentStartFrom.HasValue ?
                new ObjectParameter("InstallmentStartFrom", installmentStartFrom) :
                new ObjectParameter("InstallmentStartFrom", typeof(System.DateTime));
    
            var monthlyPrincipalDemandParameter = monthlyPrincipalDemand.HasValue ?
                new ObjectParameter("MonthlyPrincipalDemand", monthlyPrincipalDemand) :
                new ObjectParameter("MonthlyPrincipalDemand", typeof(decimal));
    
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var loanRefNumberParameter = loanRefNumber != null ?
                new ObjectParameter("LoanRefNumber", loanRefNumber) :
                new ObjectParameter("LoanRefNumber", typeof(string));
    
            var vocherTypeParameter = vocherType != null ?
                new ObjectParameter("VocherType", vocherType) :
                new ObjectParameter("VocherType", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankNameParameter = bankName.HasValue ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var vocherDateParameter = vocherDate.HasValue ?
                new ObjectParameter("VocherDate", vocherDate) :
                new ObjectParameter("VocherDate", typeof(System.DateTime));
    
            var loanClosingDateParameter = loanClosingDate.HasValue ?
                new ObjectParameter("LoanClosingDate", loanClosingDate) :
                new ObjectParameter("LoanClosingDate", typeof(System.DateTime));
    
            var loanClosedByParameter = loanClosedBy.HasValue ?
                new ObjectParameter("LoanClosedBy", loanClosedBy) :
                new ObjectParameter("LoanClosedBy", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanDisbursementUpdate", loanMasterIDParameter, disbursedAmountParameter, noOfInstallmentsParameter, disbursementDateParameter, sLAccountNumberParameter, groupInterstRateIDParameter, interestRateIDParameter, xROIParameter, xPROIParameter, installmentStartFromParameter, monthlyPrincipalDemandParameter, fundSourceIDParameter, projectIDParameter, loanRefNumberParameter, vocherTypeParameter, accountNumberParameter, bankNameParameter, chequeNumberParameter, vocherDateParameter, loanClosingDateParameter, loanClosedByParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspLoanGroupLoanDisbursementLookup_Result> uspLoanGroupLoanDisbursementLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanGroupLoanDisbursementLookup_Result>("uspLoanGroupLoanDisbursementLookup");
        }
    
        public virtual ObjectResult<uspLoanInterestGetViewByID_Result> uspLoanInterestGetViewByID(Nullable<int> interestID)
        {
            var interestIDParameter = interestID.HasValue ?
                new ObjectParameter("InterestID", interestID) :
                new ObjectParameter("InterestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanInterestGetViewByID_Result>("uspLoanInterestGetViewByID", interestIDParameter);
        }
    
        public virtual int uspLoanMasterInsertUpdate(Nullable<int> loanMasterID, string loanCode, Nullable<int> codeSno, string loanType, Nullable<int> memberID, Nullable<int> groupID, Nullable<System.DateTime> loanApplicationDate, Nullable<int> loanPurpose, Nullable<decimal> loanAmountApplied, Nullable<byte> noofInstallmentsProposed, Nullable<int> mode, Nullable<decimal> disbursedAmount, Nullable<byte> noOfInstallments, Nullable<System.DateTime> disbursementDate, string sLAccountNumber, Nullable<int> groupInterstRateID, Nullable<int> interestRateID, Nullable<decimal> xROI, Nullable<decimal> xPROI, Nullable<System.DateTime> installmentStartFrom, Nullable<decimal> monthlyPrincipalDemand, Nullable<int> fundSourceID, Nullable<int> projectID, string loanRefNumber, string vocherType, string accountNumber, Nullable<int> bankName, string chequeNumber, Nullable<System.DateTime> vocherDate, Nullable<System.DateTime> loanClosingDate, Nullable<int> loanClosedBy, Nullable<int> userId, Nullable<System.DateTime> createdOn, Nullable<System.DateTime> modifiedOn)
        {
            var loanMasterIDParameter = loanMasterID.HasValue ?
                new ObjectParameter("LoanMasterID", loanMasterID) :
                new ObjectParameter("LoanMasterID", typeof(int));
    
            var loanCodeParameter = loanCode != null ?
                new ObjectParameter("LoanCode", loanCode) :
                new ObjectParameter("LoanCode", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(int));
    
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var loanApplicationDateParameter = loanApplicationDate.HasValue ?
                new ObjectParameter("LoanApplicationDate", loanApplicationDate) :
                new ObjectParameter("LoanApplicationDate", typeof(System.DateTime));
    
            var loanPurposeParameter = loanPurpose.HasValue ?
                new ObjectParameter("LoanPurpose", loanPurpose) :
                new ObjectParameter("LoanPurpose", typeof(int));
    
            var loanAmountAppliedParameter = loanAmountApplied.HasValue ?
                new ObjectParameter("LoanAmountApplied", loanAmountApplied) :
                new ObjectParameter("LoanAmountApplied", typeof(decimal));
    
            var noofInstallmentsProposedParameter = noofInstallmentsProposed.HasValue ?
                new ObjectParameter("NoofInstallmentsProposed", noofInstallmentsProposed) :
                new ObjectParameter("NoofInstallmentsProposed", typeof(byte));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var disbursedAmountParameter = disbursedAmount.HasValue ?
                new ObjectParameter("DisbursedAmount", disbursedAmount) :
                new ObjectParameter("DisbursedAmount", typeof(decimal));
    
            var noOfInstallmentsParameter = noOfInstallments.HasValue ?
                new ObjectParameter("NoOfInstallments", noOfInstallments) :
                new ObjectParameter("NoOfInstallments", typeof(byte));
    
            var disbursementDateParameter = disbursementDate.HasValue ?
                new ObjectParameter("DisbursementDate", disbursementDate) :
                new ObjectParameter("DisbursementDate", typeof(System.DateTime));
    
            var sLAccountNumberParameter = sLAccountNumber != null ?
                new ObjectParameter("SLAccountNumber", sLAccountNumber) :
                new ObjectParameter("SLAccountNumber", typeof(string));
    
            var groupInterstRateIDParameter = groupInterstRateID.HasValue ?
                new ObjectParameter("GroupInterstRateID", groupInterstRateID) :
                new ObjectParameter("GroupInterstRateID", typeof(int));
    
            var interestRateIDParameter = interestRateID.HasValue ?
                new ObjectParameter("InterestRateID", interestRateID) :
                new ObjectParameter("InterestRateID", typeof(int));
    
            var xROIParameter = xROI.HasValue ?
                new ObjectParameter("XROI", xROI) :
                new ObjectParameter("XROI", typeof(decimal));
    
            var xPROIParameter = xPROI.HasValue ?
                new ObjectParameter("XPROI", xPROI) :
                new ObjectParameter("XPROI", typeof(decimal));
    
            var installmentStartFromParameter = installmentStartFrom.HasValue ?
                new ObjectParameter("InstallmentStartFrom", installmentStartFrom) :
                new ObjectParameter("InstallmentStartFrom", typeof(System.DateTime));
    
            var monthlyPrincipalDemandParameter = monthlyPrincipalDemand.HasValue ?
                new ObjectParameter("MonthlyPrincipalDemand", monthlyPrincipalDemand) :
                new ObjectParameter("MonthlyPrincipalDemand", typeof(decimal));
    
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            var loanRefNumberParameter = loanRefNumber != null ?
                new ObjectParameter("LoanRefNumber", loanRefNumber) :
                new ObjectParameter("LoanRefNumber", typeof(string));
    
            var vocherTypeParameter = vocherType != null ?
                new ObjectParameter("VocherType", vocherType) :
                new ObjectParameter("VocherType", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var bankNameParameter = bankName.HasValue ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(int));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var vocherDateParameter = vocherDate.HasValue ?
                new ObjectParameter("VocherDate", vocherDate) :
                new ObjectParameter("VocherDate", typeof(System.DateTime));
    
            var loanClosingDateParameter = loanClosingDate.HasValue ?
                new ObjectParameter("LoanClosingDate", loanClosingDate) :
                new ObjectParameter("LoanClosingDate", typeof(System.DateTime));
    
            var loanClosedByParameter = loanClosedBy.HasValue ?
                new ObjectParameter("LoanClosedBy", loanClosedBy) :
                new ObjectParameter("LoanClosedBy", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanMasterInsertUpdate", loanMasterIDParameter, loanCodeParameter, codeSnoParameter, loanTypeParameter, memberIDParameter, groupIDParameter, loanApplicationDateParameter, loanPurposeParameter, loanAmountAppliedParameter, noofInstallmentsProposedParameter, modeParameter, disbursedAmountParameter, noOfInstallmentsParameter, disbursementDateParameter, sLAccountNumberParameter, groupInterstRateIDParameter, interestRateIDParameter, xROIParameter, xPROIParameter, installmentStartFromParameter, monthlyPrincipalDemandParameter, fundSourceIDParameter, projectIDParameter, loanRefNumberParameter, vocherTypeParameter, accountNumberParameter, bankNameParameter, chequeNumberParameter, vocherDateParameter, loanClosingDateParameter, loanClosedByParameter, userIdParameter, createdOnParameter, modifiedOnParameter);
        }
    
        public virtual int uspLoanPurposeChangeStatus(ObjectParameter loanpurposeId, ObjectParameter loanPurposeCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanPurposeChangeStatus", loanpurposeId, loanPurposeCode, statusCode, userIdParameter);
        }
    
        public virtual int uspLoanPurposeDelete(ObjectParameter loanPurposeID, ObjectParameter loanPurposeCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanPurposeDelete", loanPurposeID, loanPurposeCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspLoanRefunds_Result> uspLoanRefunds(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanRefunds_Result>("uspLoanRefunds", memberIdParameter);
        }
    
        public virtual ObjectResult<uspLoanRefundsGetAccountHeads_Result> uspLoanRefundsGetAccountHeads(Nullable<int> memberId)
        {
            var memberIdParameter = memberId.HasValue ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanRefundsGetAccountHeads_Result>("uspLoanRefundsGetAccountHeads", memberIdParameter);
        }
    
        public virtual ObjectResult<uspLoanSecurityGetAll_Result> uspLoanSecurityGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityGetAll_Result>("uspLoanSecurityGetAll");
        }
    
        public virtual ObjectResult<uspLoanSecurityGetByLoanSecurityID_Result> uspLoanSecurityGetByLoanSecurityID(Nullable<int> loanSecurityID)
        {
            var loanSecurityIDParameter = loanSecurityID.HasValue ?
                new ObjectParameter("LoanSecurityID", loanSecurityID) :
                new ObjectParameter("LoanSecurityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityGetByLoanSecurityID_Result>("uspLoanSecurityGetByLoanSecurityID", loanSecurityIDParameter);
        }
    
        public virtual int uspLoanSecurityInsertUpdate(Nullable<int> loanSecurityID, Nullable<int> type, string loanSecurityName, Nullable<int> statusID, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, Nullable<int> modifiedBy, Nullable<System.DateTime> modifiedOn, ObjectParameter loanSecurityCode)
        {
            var loanSecurityIDParameter = loanSecurityID.HasValue ?
                new ObjectParameter("LoanSecurityID", loanSecurityID) :
                new ObjectParameter("LoanSecurityID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var loanSecurityNameParameter = loanSecurityName != null ?
                new ObjectParameter("LoanSecurityName", loanSecurityName) :
                new ObjectParameter("LoanSecurityName", typeof(string));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy.HasValue ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(int));
    
            var modifiedOnParameter = modifiedOn.HasValue ?
                new ObjectParameter("ModifiedOn", modifiedOn) :
                new ObjectParameter("ModifiedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanSecurityInsertUpdate", loanSecurityIDParameter, typeParameter, loanSecurityNameParameter, statusIDParameter, createdByParameter, createdOnParameter, modifiedByParameter, modifiedOnParameter, loanSecurityCode);
        }
    
        public virtual ObjectResult<uspLoanSecurityLookup_Result> uspLoanSecurityLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityLookup_Result>("uspLoanSecurityLookup");
        }
    
        public virtual int uspLoanSecurityMasterChangeStatus(ObjectParameter loanSecurityId, ObjectParameter loanSecurityCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanSecurityMasterChangeStatus", loanSecurityId, loanSecurityCode, statusCode, userIdParameter);
        }
    
        public virtual int uspLoanSecurityMasterDelete(ObjectParameter loanSecurityID, ObjectParameter loanSecurityCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanSecurityMasterDelete", loanSecurityID, loanSecurityCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspLoanSecurityMasterGetAll_Result> uspLoanSecurityMasterGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityMasterGetAll_Result>("uspLoanSecurityMasterGetAll");
        }
    
        public virtual ObjectResult<uspLoanSecurityMasterGetByLoanSecurityID_Result> uspLoanSecurityMasterGetByLoanSecurityID(Nullable<int> loanSecurityID)
        {
            var loanSecurityIDParameter = loanSecurityID.HasValue ?
                new ObjectParameter("LoanSecurityID", loanSecurityID) :
                new ObjectParameter("LoanSecurityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityMasterGetByLoanSecurityID_Result>("uspLoanSecurityMasterGetByLoanSecurityID", loanSecurityIDParameter);
        }
    
        public virtual int uspLoanSecurityMasterInsertUpdate(ObjectParameter loanSecurityID, Nullable<int> type, string loanSecurityName, Nullable<int> userID, ObjectParameter loanSecurityCode)
        {
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var loanSecurityNameParameter = loanSecurityName != null ?
                new ObjectParameter("LoanSecurityName", loanSecurityName) :
                new ObjectParameter("LoanSecurityName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanSecurityMasterInsertUpdate", loanSecurityID, typeParameter, loanSecurityNameParameter, userIDParameter, loanSecurityCode);
        }
    
        public virtual ObjectResult<uspLoanSecurityMasterLookup_Result> uspLoanSecurityMasterLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanSecurityMasterLookup_Result>("uspLoanSecurityMasterLookup");
        }
    
        public virtual int uspManageDepreciation(string depreciationXML, Nullable<int> userID, ObjectParameter retVal)
        {
            var depreciationXMLParameter = depreciationXML != null ?
                new ObjectParameter("DepreciationXML", depreciationXML) :
                new ObjectParameter("DepreciationXML", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspManageDepreciation", depreciationXMLParameter, userIDParameter, retVal);
        }
    
        public virtual int uspManageNPA(string nPAXML, Nullable<int> userID, ObjectParameter retVal)
        {
            var nPAXMLParameter = nPAXML != null ?
                new ObjectParameter("NPAXML", nPAXML) :
                new ObjectParameter("NPAXML", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspManageNPA", nPAXMLParameter, userIDParameter, retVal);
        }
    
        public virtual int uspManageRAP(string rAPXML, Nullable<bool> isGroup, Nullable<int> userID, ObjectParameter retVal)
        {
            var rAPXMLParameter = rAPXML != null ?
                new ObjectParameter("RAPXML", rAPXML) :
                new ObjectParameter("RAPXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspManageRAP", rAPXMLParameter, isGroupParameter, userIDParameter, retVal);
        }
    
        public virtual int uspMandalChangeStatus(ObjectParameter mandalID, ObjectParameter mandalCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMandalChangeStatus", mandalID, mandalCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspMandalGetAll_Result> uspMandalGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMandalGetAll_Result>("uspMandalGetAll");
        }
    
        public virtual ObjectResult<uspMandalGetByID_Result> uspMandalGetByID(Nullable<int> mandalID)
        {
            var mandalIDParameter = mandalID.HasValue ?
                new ObjectParameter("MandalID", mandalID) :
                new ObjectParameter("MandalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMandalGetByID_Result>("uspMandalGetByID", mandalIDParameter);
        }
    
        public virtual int uspMandalInsertUpdate(ObjectParameter mandalID, string mandal, string tEMandalName, string mandalType, Nullable<int> districtID, Nullable<int> userID, ObjectParameter mandalCode)
        {
            var mandalParameter = mandal != null ?
                new ObjectParameter("Mandal", mandal) :
                new ObjectParameter("Mandal", typeof(string));
    
            var tEMandalNameParameter = tEMandalName != null ?
                new ObjectParameter("TEMandalName", tEMandalName) :
                new ObjectParameter("TEMandalName", typeof(string));
    
            var mandalTypeParameter = mandalType != null ?
                new ObjectParameter("MandalType", mandalType) :
                new ObjectParameter("MandalType", typeof(string));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMandalInsertUpdate", mandalID, mandalParameter, tEMandalNameParameter, mandalTypeParameter, districtIDParameter, userIDParameter, mandalCode);
        }
    
        public virtual ObjectResult<uspMandalLookup_Result> uspMandalLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMandalLookup_Result>("uspMandalLookup");
        }
    
        public virtual ObjectResult<uspmeetingLeaders_Result> uspmeetingLeaders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspmeetingLeaders_Result>("uspmeetingLeaders");
        }
    
        public virtual int uspMemberAccountHeadUpdate(Nullable<int> memberID, Nullable<int> accountHeadID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var accountHeadIDParameter = accountHeadID.HasValue ?
                new ObjectParameter("AccountHeadID", accountHeadID) :
                new ObjectParameter("AccountHeadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberAccountHeadUpdate", memberIDParameter, accountHeadIDParameter);
        }
    
        public virtual ObjectResult<uspMemberByGroupId_Result> uspMemberByGroupId(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberByGroupId_Result>("uspMemberByGroupId", groupIdParameter);
        }
    
        public virtual int uspMemberChangeStatus(ObjectParameter memberID, ObjectParameter memberCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberChangeStatus", memberID, memberCode, statusCode, userIdParameter);
        }
    
        public virtual int uspMemberDelete(ObjectParameter memberID, ObjectParameter memberCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberDelete", memberID, memberCode, userIdParameter);
        }
    
        public virtual int uspMemberFamilyDetailsUpdate(Nullable<int> memberID, string nomineeName, Nullable<int> nomineeRelationship, string parentGuardianName, Nullable<int> parentGuardianRelationship, Nullable<int> socialCategory, Nullable<int> monthlyIncome, Nullable<byte> earningMembersInFamily, Nullable<byte> nonEarningMembersInFamily, Nullable<int> incomeFrequency, Nullable<decimal> investmentSize, Nullable<int> assetsInNameOfMember, Nullable<int> userID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var nomineeNameParameter = nomineeName != null ?
                new ObjectParameter("NomineeName", nomineeName) :
                new ObjectParameter("NomineeName", typeof(string));
    
            var nomineeRelationshipParameter = nomineeRelationship.HasValue ?
                new ObjectParameter("NomineeRelationship", nomineeRelationship) :
                new ObjectParameter("NomineeRelationship", typeof(int));
    
            var parentGuardianNameParameter = parentGuardianName != null ?
                new ObjectParameter("ParentGuardianName", parentGuardianName) :
                new ObjectParameter("ParentGuardianName", typeof(string));
    
            var parentGuardianRelationshipParameter = parentGuardianRelationship.HasValue ?
                new ObjectParameter("ParentGuardianRelationship", parentGuardianRelationship) :
                new ObjectParameter("ParentGuardianRelationship", typeof(int));
    
            var socialCategoryParameter = socialCategory.HasValue ?
                new ObjectParameter("SocialCategory", socialCategory) :
                new ObjectParameter("SocialCategory", typeof(int));
    
            var monthlyIncomeParameter = monthlyIncome.HasValue ?
                new ObjectParameter("MonthlyIncome", monthlyIncome) :
                new ObjectParameter("MonthlyIncome", typeof(int));
    
            var earningMembersInFamilyParameter = earningMembersInFamily.HasValue ?
                new ObjectParameter("EarningMembersInFamily", earningMembersInFamily) :
                new ObjectParameter("EarningMembersInFamily", typeof(byte));
    
            var nonEarningMembersInFamilyParameter = nonEarningMembersInFamily.HasValue ?
                new ObjectParameter("NonEarningMembersInFamily", nonEarningMembersInFamily) :
                new ObjectParameter("NonEarningMembersInFamily", typeof(byte));
    
            var incomeFrequencyParameter = incomeFrequency.HasValue ?
                new ObjectParameter("IncomeFrequency", incomeFrequency) :
                new ObjectParameter("IncomeFrequency", typeof(int));
    
            var investmentSizeParameter = investmentSize.HasValue ?
                new ObjectParameter("InvestmentSize", investmentSize) :
                new ObjectParameter("InvestmentSize", typeof(decimal));
    
            var assetsInNameOfMemberParameter = assetsInNameOfMember.HasValue ?
                new ObjectParameter("AssetsInNameOfMember", assetsInNameOfMember) :
                new ObjectParameter("AssetsInNameOfMember", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberFamilyDetailsUpdate", memberIDParameter, nomineeNameParameter, nomineeRelationshipParameter, parentGuardianNameParameter, parentGuardianRelationshipParameter, socialCategoryParameter, monthlyIncomeParameter, earningMembersInFamilyParameter, nonEarningMembersInFamilyParameter, incomeFrequencyParameter, investmentSizeParameter, assetsInNameOfMemberParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspMemberKYCGetByMemberID_Result> uspMemberKYCGetByMemberID(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberKYCGetByMemberID_Result>("uspMemberKYCGetByMemberID", memberIDParameter);
        }
    
        public virtual ObjectResult<uspMemberKYCGetByMemberKYCID_Result> uspMemberKYCGetByMemberKYCID(Nullable<int> memberKYCID)
        {
            var memberKYCIDParameter = memberKYCID.HasValue ?
                new ObjectParameter("MemberKYCID", memberKYCID) :
                new ObjectParameter("MemberKYCID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberKYCGetByMemberKYCID_Result>("uspMemberKYCGetByMemberKYCID", memberKYCIDParameter);
        }
    
        public virtual int uspMemberKYCInsertUpdate(ObjectParameter memberKYCID, Nullable<int> memberID, string kYCNumber, Nullable<int> kYCType, string fileName, string actualFileName, Nullable<int> userID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var kYCNumberParameter = kYCNumber != null ?
                new ObjectParameter("KYCNumber", kYCNumber) :
                new ObjectParameter("KYCNumber", typeof(string));
    
            var kYCTypeParameter = kYCType.HasValue ?
                new ObjectParameter("KYCType", kYCType) :
                new ObjectParameter("KYCType", typeof(int));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var actualFileNameParameter = actualFileName != null ?
                new ObjectParameter("ActualFileName", actualFileName) :
                new ObjectParameter("ActualFileName", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberKYCInsertUpdate", memberKYCID, memberIDParameter, kYCNumberParameter, kYCTypeParameter, fileNameParameter, actualFileNameParameter, userIDParameter);
        }
    
        public virtual int uspMemberLoanApplicationChangeStatus(ObjectParameter loanmasterId, ObjectParameter loanCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberLoanApplicationChangeStatus", loanmasterId, loanCode, statusCode, userIdParameter);
        }
    
        public virtual int uspMemberLoanApplicationDelete(ObjectParameter loanMasterID, ObjectParameter loanCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberLoanApplicationDelete", loanMasterID, loanCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspMemberLoanApplicationGetAll_Result> uspMemberLoanApplicationGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberLoanApplicationGetAll_Result>("uspMemberLoanApplicationGetAll");
        }
    
        public virtual ObjectResult<uspMemberReceipt_Result> uspMemberReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberReceipt_Result>("uspMemberReceipt");
        }
    
        public virtual int uspMemberReceiptChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberReceiptChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspMemerReceiptDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemerReceiptDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual int uspModuleActionChangeStatus(ObjectParameter moduleActionId, ObjectParameter statusCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModuleActionChangeStatus", moduleActionId, statusCode);
        }
    
        public virtual int uspModuleActionDelete(ObjectParameter moduleActionId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModuleActionDelete", moduleActionId);
        }
    
        public virtual ObjectResult<uspModuleActionGetByID_Result> uspModuleActionGetByID(Nullable<int> moduleActionId)
        {
            var moduleActionIdParameter = moduleActionId.HasValue ?
                new ObjectParameter("ModuleActionId", moduleActionId) :
                new ObjectParameter("ModuleActionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspModuleActionGetByID_Result>("uspModuleActionGetByID", moduleActionIdParameter);
        }
    
        public virtual int uspModuleActionInsertUpdate(ObjectParameter moduleActionId, string moduleActionCode, string actionName, Nullable<int> moduleId, string url)
        {
            var moduleActionCodeParameter = moduleActionCode != null ?
                new ObjectParameter("ModuleActionCode", moduleActionCode) :
                new ObjectParameter("ModuleActionCode", typeof(string));
    
            var actionNameParameter = actionName != null ?
                new ObjectParameter("ActionName", actionName) :
                new ObjectParameter("ActionName", typeof(string));
    
            var moduleIdParameter = moduleId.HasValue ?
                new ObjectParameter("ModuleId", moduleId) :
                new ObjectParameter("ModuleId", typeof(int));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModuleActionInsertUpdate", moduleActionId, moduleActionCodeParameter, actionNameParameter, moduleIdParameter, urlParameter);
        }
    
        public virtual ObjectResult<uspModuleActionLookup_Result> uspModuleActionLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspModuleActionLookup_Result>("uspModuleActionLookup");
        }
    
        public virtual ObjectResult<uspModuleGetAll_Result> uspModuleGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspModuleGetAll_Result>("uspModuleGetAll");
        }
    
        public virtual int uspModuleInsert(string moduleCode, string moduleName, string moduleType, string url)
        {
            var moduleCodeParameter = moduleCode != null ?
                new ObjectParameter("ModuleCode", moduleCode) :
                new ObjectParameter("ModuleCode", typeof(string));
    
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModuleInsert", moduleCodeParameter, moduleNameParameter, moduleTypeParameter, urlParameter);
        }
    
        public virtual int uspModulesGetByModuleID(ObjectParameter moduleId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModulesGetByModuleID", moduleId);
        }
    
        public virtual int uspModulesInsertUpdate(ObjectParameter moduleId, string moduleName, string moduleType, string uRL)
        {
            var moduleNameParameter = moduleName != null ?
                new ObjectParameter("ModuleName", moduleName) :
                new ObjectParameter("ModuleName", typeof(string));
    
            var moduleTypeParameter = moduleType != null ?
                new ObjectParameter("ModuleType", moduleType) :
                new ObjectParameter("ModuleType", typeof(string));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModulesInsertUpdate", moduleId, moduleNameParameter, moduleTypeParameter, uRLParameter);
        }
    
        public virtual int uspModulsLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspModulsLookUp");
        }
    
        public virtual int uspObjectBanksInsertUpdate(ObjectParameter objectId, string objectCode, Nullable<int> userId, string banksXML)
        {
            var objectCodeParameter = objectCode != null ?
                new ObjectParameter("ObjectCode", objectCode) :
                new ObjectParameter("ObjectCode", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var banksXMLParameter = banksXML != null ?
                new ObjectParameter("BanksXML", banksXML) :
                new ObjectParameter("BanksXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspObjectBanksInsertUpdate", objectId, objectCodeParameter, userIdParameter, banksXMLParameter);
        }
    
        public virtual int uspOccupationChangeStatus(ObjectParameter occupationID, ObjectParameter occupationCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspOccupationChangeStatus", occupationID, occupationCode, statusCode, userIdParameter);
        }
    
        public virtual int uspOccupationDelete(ObjectParameter occupationID, ObjectParameter occupationCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspOccupationDelete", occupationID, occupationCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspOccupationGetAll_Result> uspOccupationGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOccupationGetAll_Result>("uspOccupationGetAll");
        }
    
        public virtual ObjectResult<uspOccupationGetByOccupationID_Result> uspOccupationGetByOccupationID(Nullable<int> occupationID)
        {
            var occupationIDParameter = occupationID.HasValue ?
                new ObjectParameter("OccupationID", occupationID) :
                new ObjectParameter("OccupationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOccupationGetByOccupationID_Result>("uspOccupationGetByOccupationID", occupationIDParameter);
        }
    
        public virtual int uspOccupationInsertUpdate(ObjectParameter occupationID, ObjectParameter occupationCode, Nullable<int> occupationCategory, string occupation, Nullable<int> userID)
        {
            var occupationCategoryParameter = occupationCategory.HasValue ?
                new ObjectParameter("OccupationCategory", occupationCategory) :
                new ObjectParameter("OccupationCategory", typeof(int));
    
            var occupationParameter = occupation != null ?
                new ObjectParameter("Occupation", occupation) :
                new ObjectParameter("Occupation", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspOccupationInsertUpdate", occupationID, occupationCode, occupationCategoryParameter, occupationParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspOccupationLookup_Result> uspOccupationLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOccupationLookup_Result>("uspOccupationLookup");
        }
    
        public virtual ObjectResult<uspOrganizationGetAll_Result> uspOrganizationGetAll(Nullable<int> orgID)
        {
            var orgIDParameter = orgID.HasValue ?
                new ObjectParameter("OrgID", orgID) :
                new ObjectParameter("OrgID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrganizationGetAll_Result>("uspOrganizationGetAll", orgIDParameter);
        }
    
        public virtual int uspPanchayatChangeStatus(ObjectParameter panchayatID, ObjectParameter panchayatCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPanchayatChangeStatus", panchayatID, panchayatCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspPanchayatGetAll_Result> uspPanchayatGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPanchayatGetAll_Result>("uspPanchayatGetAll");
        }
    
        public virtual ObjectResult<uspPanchayatGetByGroupID_Result> uspPanchayatGetByGroupID(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPanchayatGetByGroupID_Result>("uspPanchayatGetByGroupID", groupIDParameter);
        }
    
        public virtual ObjectResult<uspPanchayatGetByPanchayatId_Result> uspPanchayatGetByPanchayatId(Nullable<int> panchayatID)
        {
            var panchayatIDParameter = panchayatID.HasValue ?
                new ObjectParameter("PanchayatID", panchayatID) :
                new ObjectParameter("PanchayatID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPanchayatGetByPanchayatId_Result>("uspPanchayatGetByPanchayatId", panchayatIDParameter);
        }
    
        public virtual ObjectResult<uspPanchayatGetViewByID_Result> uspPanchayatGetViewByID(Nullable<int> panchayatId)
        {
            var panchayatIdParameter = panchayatId.HasValue ?
                new ObjectParameter("PanchayatId", panchayatId) :
                new ObjectParameter("PanchayatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPanchayatGetViewByID_Result>("uspPanchayatGetViewByID", panchayatIdParameter);
        }
    
        public virtual int uspPanchayatInsertUpdate(ObjectParameter panchayatID, string panchayat, string tEPanchayatName, Nullable<int> villageID, Nullable<int> userID, ObjectParameter panchayatCode)
        {
            var panchayatParameter = panchayat != null ?
                new ObjectParameter("Panchayat", panchayat) :
                new ObjectParameter("Panchayat", typeof(string));
    
            var tEPanchayatNameParameter = tEPanchayatName != null ?
                new ObjectParameter("TEPanchayatName", tEPanchayatName) :
                new ObjectParameter("TEPanchayatName", typeof(string));
    
            var villageIDParameter = villageID.HasValue ?
                new ObjectParameter("VillageID", villageID) :
                new ObjectParameter("VillageID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPanchayatInsertUpdate", panchayatID, panchayatParameter, tEPanchayatNameParameter, villageIDParameter, userIDParameter, panchayatCode);
        }
    
        public virtual ObjectResult<uspPanchayatLookup_Result> uspPanchayatLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPanchayatLookup_Result>("uspPanchayatLookup");
        }
    
        public virtual ObjectResult<uspPaymentsToFederationByID_Result> uspPaymentsToFederationByID(Nullable<long> accountMasterID)
        {
            var accountMasterIDParameter = accountMasterID.HasValue ?
                new ObjectParameter("AccountMasterID", accountMasterID) :
                new ObjectParameter("AccountMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPaymentsToFederationByID_Result>("uspPaymentsToFederationByID", accountMasterIDParameter);
        }
    
        public virtual int uspPaymentsToFederationChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPaymentsToFederationChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspPaymentsToFederationDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPaymentsToFederationDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual ObjectResult<uspPaymentsToFederationLookup_Result> uspPaymentsToFederationLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspPaymentsToFederationLookup_Result>("uspPaymentsToFederationLookup");
        }
    
        public virtual int uspProjectChangeStatus(ObjectParameter projectID, ObjectParameter projectCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProjectChangeStatus", projectID, projectCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspProjectGetAll_Result> uspProjectGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProjectGetAll_Result>("uspProjectGetAll");
        }
    
        public virtual ObjectResult<uspProjectGetById_Result> uspProjectGetById(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProjectGetById_Result>("uspProjectGetById", projectIDParameter);
        }
    
        public virtual int uspProjectInsertUpdate(ObjectParameter projectID, ObjectParameter projectCode, Nullable<int> fundSourceID, string projectName, Nullable<int> purpose, Nullable<int> type, Nullable<int> userID)
        {
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("ProjectName", projectName) :
                new ObjectParameter("ProjectName", typeof(string));
    
            var purposeParameter = purpose.HasValue ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProjectInsertUpdate", projectID, projectCode, fundSourceIDParameter, projectNameParameter, purposeParameter, typeParameter, userIDParameter);
        }
    
        public virtual ObjectResult<uspProjectLookup_Result> uspProjectLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspProjectLookup_Result>("uspProjectLookup");
        }
    
        public virtual int uspRefundsFromFederationChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefundsFromFederationChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspRefundsFromFederationDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefundsFromFederationDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual ObjectResult<uspRefValuesByRefMasterCode_Result> uspRefValuesByRefMasterCode(string refMasterCode)
        {
            var refMasterCodeParameter = refMasterCode != null ?
                new ObjectParameter("RefMasterCode", refMasterCode) :
                new ObjectParameter("RefMasterCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRefValuesByRefMasterCode_Result>("uspRefValuesByRefMasterCode", refMasterCodeParameter);
        }
    
        public virtual int uspRoleChangeStatus(ObjectParameter roleId, ObjectParameter statusCode)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRoleChangeStatus", roleId, statusCode);
        }
    
        public virtual int uspRoleDelete(ObjectParameter roleId)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRoleDelete", roleId);
        }
    
        public virtual int uspRoleInsertUpdate(string roleName, string roleCode, ObjectParameter roleId)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleCodeParameter = roleCode != null ?
                new ObjectParameter("RoleCode", roleCode) :
                new ObjectParameter("RoleCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRoleInsertUpdate", roleNameParameter, roleCodeParameter, roleId);
        }
    
        public virtual ObjectResult<Nullable<int>> uspRoleModulesInsertUpdate(Nullable<int> roleid, string moduleIds)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("Roleid", roleid) :
                new ObjectParameter("Roleid", typeof(int));
    
            var moduleIdsParameter = moduleIds != null ?
                new ObjectParameter("ModuleIds", moduleIds) :
                new ObjectParameter("ModuleIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspRoleModulesInsertUpdate", roleidParameter, moduleIdsParameter);
        }
    
        public virtual ObjectResult<uspRolesGetByRoleID_Result> uspRolesGetByRoleID(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRolesGetByRoleID_Result>("uspRolesGetByRoleID", roleIdParameter);
        }
    
        public virtual ObjectResult<uspRolesLookUp_Result> uspRolesLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRolesLookUp_Result>("uspRolesLookUp");
        }
    
        public virtual ObjectResult<uspStateGetAll_Result> uspStateGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStateGetAll_Result>("uspStateGetAll");
        }
    
        public virtual ObjectResult<uspStateGetByStateId_Result> uspStateGetByStateId(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStateGetByStateId_Result>("uspStateGetByStateId", stateIDParameter);
        }
    
        public virtual int uspStateInsert(Nullable<int> stateID, string state, string tEStateName, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdOn, ObjectParameter stateCode)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var tEStateNameParameter = tEStateName != null ?
                new ObjectParameter("TEStateName", tEStateName) :
                new ObjectParameter("TEStateName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdOnParameter = createdOn.HasValue ?
                new ObjectParameter("CreatedOn", createdOn) :
                new ObjectParameter("CreatedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspStateInsert", stateIDParameter, stateParameter, tEStateNameParameter, isActiveParameter, createdByParameter, createdOnParameter, stateCode);
        }
    
        public virtual ObjectResult<uspStatusMasterGetAll_Result> uspStatusMasterGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStatusMasterGetAll_Result>("uspStatusMasterGetAll");
        }
    
        public virtual ObjectResult<uspStatusMasterGetbByStatusCode_Result> uspStatusMasterGetbByStatusCode(string statusCode)
        {
            var statusCodeParameter = statusCode != null ?
                new ObjectParameter("StatusCode", statusCode) :
                new ObjectParameter("StatusCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspStatusMasterGetbByStatusCode_Result>("uspStatusMasterGetbByStatusCode", statusCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspValicateLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspValicateLogin", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspValidateLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspValidateLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int uspVillageChangeStatus(ObjectParameter villageId, ObjectParameter villageCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVillageChangeStatus", villageId, villageCode, statusCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspVillageGetAll_Result> uspVillageGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVillageGetAll_Result>("uspVillageGetAll");
        }
    
        public virtual ObjectResult<uspVillageGetById_Result> uspVillageGetById(Nullable<int> villageID)
        {
            var villageIDParameter = villageID.HasValue ?
                new ObjectParameter("VillageID", villageID) :
                new ObjectParameter("VillageID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVillageGetById_Result>("uspVillageGetById", villageIDParameter);
        }
    
        public virtual ObjectResult<uspVillageGetViewByID_Result> uspVillageGetViewByID(Nullable<int> villageId)
        {
            var villageIdParameter = villageId.HasValue ?
                new ObjectParameter("VillageId", villageId) :
                new ObjectParameter("VillageId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVillageGetViewByID_Result>("uspVillageGetViewByID", villageIdParameter);
        }
    
        public virtual int uspVillageInsertUpdate(ObjectParameter villageID, string village, string tEVillageName, Nullable<int> clusterID, Nullable<int> userID, ObjectParameter villageCode)
        {
            var villageParameter = village != null ?
                new ObjectParameter("Village", village) :
                new ObjectParameter("Village", typeof(string));
    
            var tEVillageNameParameter = tEVillageName != null ?
                new ObjectParameter("TEVillageName", tEVillageName) :
                new ObjectParameter("TEVillageName", typeof(string));
    
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVillageInsertUpdate", villageID, villageParameter, tEVillageNameParameter, clusterIDParameter, userIDParameter, villageCode);
        }
    
        public virtual ObjectResult<uspVillageLookup_Result> uspVillageLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspVillageLookup_Result>("uspVillageLookup");
        }
    
        public virtual int uspGroupChangeStatus(ObjectParameter groupID, ObjectParameter groupCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupChangeStatus", groupID, groupCode, statusCode, userIdParameter);
        }
    
        public virtual int uspPaymentsToFederationInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPaymentsToFederationInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspBranchLookup_Result> uspBranchLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBranchLookup_Result>("uspBranchLookup");
        }
    
        public virtual int uspGeneralReceiptChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneralReceiptChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspGeneralReceiptDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneralReceiptDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual ObjectResult<uspGeneralReceiptGetById_Result> uspGeneralReceiptGetById(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGeneralReceiptGetById_Result>("uspGeneralReceiptGetById", accountMasterIdParameter);
        }
    
        public virtual ObjectResult<uspJournalEntryGetById_Result> uspJournalEntryGetById(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspJournalEntryGetById_Result>("uspJournalEntryGetById", accountMasterIdParameter);
        }
    
        public virtual ObjectResult<uspGroupReceipt_Result> uspGroupReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupReceipt_Result>("uspGroupReceipt");
        }
    
        public virtual int uspAccountHeadViewBalance(Nullable<int> ahID, Nullable<bool> isFedaration)
        {
            var ahIDParameter = ahID.HasValue ?
                new ObjectParameter("AhID", ahID) :
                new ObjectParameter("AhID", typeof(int));
    
            var isFedarationParameter = isFedaration.HasValue ?
                new ObjectParameter("IsFedaration", isFedaration) :
                new ObjectParameter("IsFedaration", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountHeadViewBalance", ahIDParameter, isFedarationParameter);
        }
    
        public virtual ObjectResult<uspGetAccountHeadClosingBalnces_Result> uspGetAccountHeadClosingBalnces()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAccountHeadClosingBalnces_Result>("uspGetAccountHeadClosingBalnces");
        }
    
        public virtual int uspOrganizationInsertUpdate(ObjectParameter orgID, ObjectParameter orgCode, string orgName, string tEOrgName, string registrationNumber, Nullable<System.DateTime> registrationDate, string address, string pAN, string tAN, string vAT, string tIN, Nullable<byte> memberRetirementAge, Nullable<byte> empRetirementAge, string groupsIndividuals, string memCompGender, Nullable<int> userID, Nullable<System.DateTime> financialYearStartDate, Nullable<System.DateTime> financialYearEndDate)
        {
            var orgNameParameter = orgName != null ?
                new ObjectParameter("OrgName", orgName) :
                new ObjectParameter("OrgName", typeof(string));
    
            var tEOrgNameParameter = tEOrgName != null ?
                new ObjectParameter("TEOrgName", tEOrgName) :
                new ObjectParameter("TEOrgName", typeof(string));
    
            var registrationNumberParameter = registrationNumber != null ?
                new ObjectParameter("RegistrationNumber", registrationNumber) :
                new ObjectParameter("RegistrationNumber", typeof(string));
    
            var registrationDateParameter = registrationDate.HasValue ?
                new ObjectParameter("RegistrationDate", registrationDate) :
                new ObjectParameter("RegistrationDate", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var pANParameter = pAN != null ?
                new ObjectParameter("PAN", pAN) :
                new ObjectParameter("PAN", typeof(string));
    
            var tANParameter = tAN != null ?
                new ObjectParameter("TAN", tAN) :
                new ObjectParameter("TAN", typeof(string));
    
            var vATParameter = vAT != null ?
                new ObjectParameter("VAT", vAT) :
                new ObjectParameter("VAT", typeof(string));
    
            var tINParameter = tIN != null ?
                new ObjectParameter("TIN", tIN) :
                new ObjectParameter("TIN", typeof(string));
    
            var memberRetirementAgeParameter = memberRetirementAge.HasValue ?
                new ObjectParameter("MemberRetirementAge", memberRetirementAge) :
                new ObjectParameter("MemberRetirementAge", typeof(byte));
    
            var empRetirementAgeParameter = empRetirementAge.HasValue ?
                new ObjectParameter("EmpRetirementAge", empRetirementAge) :
                new ObjectParameter("EmpRetirementAge", typeof(byte));
    
            var groupsIndividualsParameter = groupsIndividuals != null ?
                new ObjectParameter("GroupsIndividuals", groupsIndividuals) :
                new ObjectParameter("GroupsIndividuals", typeof(string));
    
            var memCompGenderParameter = memCompGender != null ?
                new ObjectParameter("MemCompGender", memCompGender) :
                new ObjectParameter("MemCompGender", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var financialYearStartDateParameter = financialYearStartDate.HasValue ?
                new ObjectParameter("FinancialYearStartDate", financialYearStartDate) :
                new ObjectParameter("FinancialYearStartDate", typeof(System.DateTime));
    
            var financialYearEndDateParameter = financialYearEndDate.HasValue ?
                new ObjectParameter("FinancialYearEndDate", financialYearEndDate) :
                new ObjectParameter("FinancialYearEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspOrganizationInsertUpdate", orgID, orgCode, orgNameParameter, tEOrgNameParameter, registrationNumberParameter, registrationDateParameter, addressParameter, pANParameter, tANParameter, vATParameter, tINParameter, memberRetirementAgeParameter, empRetirementAgeParameter, groupsIndividualsParameter, memCompGenderParameter, userIDParameter, financialYearStartDateParameter, financialYearEndDateParameter);
        }
    
        public virtual ObjectResult<uspFederationGeneralReceiptLookup_Result> uspFederationGeneralReceiptLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationGeneralReceiptLookup_Result>("uspFederationGeneralReceiptLookup");
        }
    
        public virtual ObjectResult<uspGroupReceiptLookup_Result> uspGroupReceiptLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupReceiptLookup_Result>("uspGroupReceiptLookup");
        }
    
        public virtual ObjectResult<uspBankMasterGetByBankId_Result> uspBankMasterGetByBankId(Nullable<int> bankEntryID)
        {
            var bankEntryIDParameter = bankEntryID.HasValue ?
                new ObjectParameter("BankEntryID", bankEntryID) :
                new ObjectParameter("BankEntryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankMasterGetByBankId_Result>("uspBankMasterGetByBankId", bankEntryIDParameter);
        }
    
        public virtual ObjectResult<uspGroupDetailsGetByEmployeeId_Result> uspGroupDetailsGetByEmployeeId(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupDetailsGetByEmployeeId_Result>("uspGroupDetailsGetByEmployeeId", employeeIdParameter);
        }
    
        public virtual int uspEmployeeDelete(ObjectParameter employeeId, ObjectParameter employeeCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEmployeeDelete", employeeId, employeeCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspEmployeeLookUp_Result> uspEmployeeLookUp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeLookUp_Result>("uspEmployeeLookUp");
        }
    
        public virtual int uspGroupDelete(Nullable<int> groupId, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupDelete", groupIdParameter, userIdParameter, result, message);
        }
    
        public virtual ObjectResult<uspBankMasterGetAll_Result> uspBankMasterGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankMasterGetAll_Result>("uspBankMasterGetAll");
        }
    
        public virtual ObjectResult<uspGroupDepositLoanInterestByID_Result> uspGroupDepositLoanInterestByID(Nullable<int> groupID, string tYPE)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var tYPEParameter = tYPE != null ?
                new ObjectParameter("TYPE", tYPE) :
                new ObjectParameter("TYPE", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupDepositLoanInterestByID_Result>("uspGroupDepositLoanInterestByID", groupIDParameter, tYPEParameter);
        }
    
        public virtual ObjectResult<uspEmployeeGetViewByID_Result> uspEmployeeGetViewByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeGetViewByID_Result>("uspEmployeeGetViewByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<uspMemberLookup_Result> uspMemberLookup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberLookup_Result>("uspMemberLookup", groupIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspLoanMasterGetByMemberID(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspLoanMasterGetByMemberID", memberIDParameter);
        }
    
        public virtual ObjectResult<uspGroupLookup_Result> uspGroupLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLookup_Result>("uspGroupLookup");
        }
    
        public virtual ObjectResult<uspMemberGetViewByID_Result> uspMemberGetViewByID(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberGetViewByID_Result>("uspMemberGetViewByID", memberIDParameter);
        }
    
        public virtual ObjectResult<uspMemberKYCGetViewByID_Result> uspMemberKYCGetViewByID(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberKYCGetViewByID_Result>("uspMemberKYCGetViewByID", memberIDParameter);
        }
    
        public virtual int uspGroupMeetingChangeStatus(ObjectParameter groupMeetingID, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupMeetingChangeStatus", groupMeetingID, statusCode, userIdParameter);
        }
    
        public virtual int uspGroupMeetingDelete(ObjectParameter groupMeetingID, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupMeetingDelete", groupMeetingID, userIdParameter);
        }
    
        public virtual ObjectResult<uspGroupMeetingmembersGetById_Result> uspGroupMeetingmembersGetById(Nullable<int> groupMeetingID)
        {
            var groupMeetingIDParameter = groupMeetingID.HasValue ?
                new ObjectParameter("GroupMeetingID", groupMeetingID) :
                new ObjectParameter("GroupMeetingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupMeetingmembersGetById_Result>("uspGroupMeetingmembersGetById", groupMeetingIDParameter);
        }
    
        public virtual int uspFederationMeetingChangeStatus(ObjectParameter federationMeetingID, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationMeetingChangeStatus", federationMeetingID, statusCode, userIdParameter);
        }
    
        public virtual int uspFederationMeetingDelete(ObjectParameter federationMeetingID, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationMeetingDelete", federationMeetingID, userIdParameter);
        }
    
        public virtual ObjectResult<uspFederationMeetingmembersGetById_Result> uspFederationMeetingmembersGetById(Nullable<int> federationMeetingID)
        {
            var federationMeetingIDParameter = federationMeetingID.HasValue ?
                new ObjectParameter("FederationMeetingID", federationMeetingID) :
                new ObjectParameter("FederationMeetingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationMeetingmembersGetById_Result>("uspFederationMeetingmembersGetById", federationMeetingIDParameter);
        }
    
        public virtual int uspGroupMeetingInsertUpdate(ObjectParameter groupMeetingID, Nullable<int> groupID, string meetingObjective, string meetingComments, Nullable<System.DateTime> meetingDate, Nullable<System.DateTime> transactionDate, Nullable<bool> isConducted, Nullable<bool> isSplMeeting, Nullable<int> reason, string otherReason, Nullable<int> userID, string groupMeetingmember)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var meetingObjectiveParameter = meetingObjective != null ?
                new ObjectParameter("MeetingObjective", meetingObjective) :
                new ObjectParameter("MeetingObjective", typeof(string));
    
            var meetingCommentsParameter = meetingComments != null ?
                new ObjectParameter("MeetingComments", meetingComments) :
                new ObjectParameter("MeetingComments", typeof(string));
    
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var isConductedParameter = isConducted.HasValue ?
                new ObjectParameter("IsConducted", isConducted) :
                new ObjectParameter("IsConducted", typeof(bool));
    
            var isSplMeetingParameter = isSplMeeting.HasValue ?
                new ObjectParameter("IsSplMeeting", isSplMeeting) :
                new ObjectParameter("IsSplMeeting", typeof(bool));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(int));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var groupMeetingmemberParameter = groupMeetingmember != null ?
                new ObjectParameter("GroupMeetingmember", groupMeetingmember) :
                new ObjectParameter("GroupMeetingmember", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupMeetingInsertUpdate", groupMeetingID, groupIDParameter, meetingObjectiveParameter, meetingCommentsParameter, meetingDateParameter, transactionDateParameter, isConductedParameter, isSplMeetingParameter, reasonParameter, otherReasonParameter, userIDParameter, groupMeetingmemberParameter);
        }
    
        public virtual int uspClusterDelete(Nullable<int> clusterID, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var clusterIDParameter = clusterID.HasValue ?
                new ObjectParameter("ClusterID", clusterID) :
                new ObjectParameter("ClusterID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspClusterDelete", clusterIDParameter, userIdParameter, result, message);
        }
    
        public virtual int uspInterestDelete(ObjectParameter interestID, ObjectParameter interestCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInterestDelete", interestID, interestCode, userIdParameter);
        }
    
        public virtual int uspDistrictDelete(Nullable<int> districtID, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDistrictDelete", districtIDParameter, userIdParameter, result, message);
        }
    
        public virtual int uspMandalDelete(Nullable<int> mandalID, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var mandalIDParameter = mandalID.HasValue ?
                new ObjectParameter("MandalID", mandalID) :
                new ObjectParameter("MandalID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMandalDelete", mandalIDParameter, userIdParameter, result, message);
        }
    
        public virtual int uspVillageDelete(Nullable<int> villageId, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var villageIdParameter = villageId.HasValue ?
                new ObjectParameter("VillageId", villageId) :
                new ObjectParameter("VillageId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVillageDelete", villageIdParameter, userIdParameter, result, message);
        }
    
        public virtual ObjectResult<string> uspPanchayatDelete(Nullable<int> panchayatId, Nullable<int> userId, ObjectParameter result, ObjectParameter message)
        {
            var panchayatIdParameter = panchayatId.HasValue ?
                new ObjectParameter("PanchayatId", panchayatId) :
                new ObjectParameter("PanchayatId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspPanchayatDelete", panchayatIdParameter, userIdParameter, result, message);
        }
    
        public virtual int uspProjectDelete(ObjectParameter projectId, ObjectParameter projectCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspProjectDelete", projectId, projectCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspMemberGetAll_Result> uspMemberGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberGetAll_Result>("uspMemberGetAll");
        }
    
        public virtual ObjectResult<uspGetAccountHeadSavings_Result> uspGetAccountHeadSavings()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAccountHeadSavings_Result>("uspGetAccountHeadSavings");
        }
    
        public virtual ObjectResult<uspGetAHNamesByGroupID_Result> uspGetAHNamesByGroupID(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAHNamesByGroupID_Result>("uspGetAHNamesByGroupID", groupIDParameter);
        }
    
        public virtual ObjectResult<uspEmployeeKYCGetViewByID_Result> uspEmployeeKYCGetViewByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeKYCGetViewByID_Result>("uspEmployeeKYCGetViewByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<uspBankMasterLookup_Result> uspBankMasterLookup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspBankMasterLookup_Result>("uspBankMasterLookup", groupIdParameter);
        }
    
        public virtual int uspGroupReceiptInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupReceiptInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspGroupJournalEntryLookup_Result> uspGroupJournalEntryLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupJournalEntryLookup_Result>("uspGroupJournalEntryLookup");
        }
    
        public virtual ObjectResult<uspJournalEntryLookup_Result> uspJournalEntryLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspJournalEntryLookup_Result>("uspJournalEntryLookup");
        }
    
        public virtual ObjectResult<FederationContraEntryWithDrawlGetByAccountMasterId_Result> FederationContraEntryWithDrawlGetByAccountMasterId(Nullable<long> accountMasterID)
        {
            var accountMasterIDParameter = accountMasterID.HasValue ?
                new ObjectParameter("AccountMasterID", accountMasterID) :
                new ObjectParameter("AccountMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FederationContraEntryWithDrawlGetByAccountMasterId_Result>("FederationContraEntryWithDrawlGetByAccountMasterId", accountMasterIDParameter);
        }
    
        public virtual int uspFederationContraEntryDepositedChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryDepositedChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspFederationContraEntryDepositedDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryDepositedDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual int uspFederationContraEntryDepositedInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string vocharRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var vocharRefNumberParameter = vocharRefNumber != null ?
                new ObjectParameter("VocharRefNumber", vocharRefNumber) :
                new ObjectParameter("VocharRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryDepositedInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, vocharRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspFederationContraEntryDepositedLookup_Result> uspFederationContraEntryDepositedLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationContraEntryDepositedLookup_Result>("uspFederationContraEntryDepositedLookup");
        }
    
        public virtual int uspFederationContraEntryWithDrawlChangeStatus(ObjectParameter accountMasterID, ObjectParameter voucherNumber, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryWithDrawlChangeStatus", accountMasterID, voucherNumber, statusCode, userIdParameter);
        }
    
        public virtual int uspFederationContraEntryWithDrawlDelete(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryWithDrawlDelete", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual ObjectResult<uspFederationContraEntryWithDrawlLookup_Result> uspFederationContraEntryWithDrawlLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationContraEntryWithDrawlLookup_Result>("uspFederationContraEntryWithDrawlLookup");
        }
    
        public virtual ObjectResult<uspGroupGetAllBanksDetailsByGroupID_Result> uspGroupGetAllBanksDetailsByGroupID(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGetAllBanksDetailsByGroupID_Result>("uspGroupGetAllBanksDetailsByGroupID", groupIDParameter);
        }
    
        public virtual ObjectResult<uspGroupGeneralReceiptLookup_Result> uspGroupGeneralReceiptLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGeneralReceiptLookup_Result>("uspGroupGeneralReceiptLookup");
        }
    
        public virtual int uspGroupJournalEntryInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<decimal> amount, string narration, string partyName, Nullable<int> transactionType, string transactionMode, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userID, string addMoneyXML)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var addMoneyXMLParameter = addMoneyXML != null ?
                new ObjectParameter("AddMoneyXML", addMoneyXML) :
                new ObjectParameter("AddMoneyXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupJournalEntryInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, amountParameter, narrationParameter, partyNameParameter, transactionTypeParameter, transactionModeParameter, isGroupParameter, groupIDParameter, userIDParameter, addMoneyXMLParameter);
        }
    
        public virtual ObjectResult<uspJournalEntryVoucherGetById_Result> uspJournalEntryVoucherGetById(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspJournalEntryVoucherGetById_Result>("uspJournalEntryVoucherGetById", accountMasterIdParameter);
        }
    
        public virtual int uspAccountMasterRefundsFromFederationInsert(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userID, string type, Nullable<bool> isPairedRecord, string addMoneyXML)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPairedRecordParameter = isPairedRecord.HasValue ?
                new ObjectParameter("IsPairedRecord", isPairedRecord) :
                new ObjectParameter("IsPairedRecord", typeof(bool));
    
            var addMoneyXMLParameter = addMoneyXML != null ?
                new ObjectParameter("AddMoneyXML", addMoneyXML) :
                new ObjectParameter("AddMoneyXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountMasterRefundsFromFederationInsert", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, isGroupParameter, groupIDParameter, userIDParameter, typeParameter, isPairedRecordParameter, addMoneyXMLParameter);
        }
    
        public virtual int uspRefundsFromFederationDelete1(ObjectParameter accountMasterID, ObjectParameter voucherNumber, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefundsFromFederationDelete1", accountMasterID, voucherNumber, userIdParameter);
        }
    
        public virtual ObjectResult<uspRefundsFromfederationGetById_Result> uspRefundsFromfederationGetById(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRefundsFromfederationGetById_Result>("uspRefundsFromfederationGetById", accountMasterIdParameter);
        }
    
        public virtual int uspRefundsFromFederationInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspRefundsFromFederationInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspRefundsFromFederationLookup_Result> uspRefundsFromFederationLookup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspRefundsFromFederationLookup_Result>("uspRefundsFromFederationLookup", groupIdParameter);
        }
    
        public virtual int uspAccountMasterInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userID, string type, Nullable<bool> isPairedRecord, string addMoneyXML)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var isPairedRecordParameter = isPairedRecord.HasValue ?
                new ObjectParameter("IsPairedRecord", isPairedRecord) :
                new ObjectParameter("IsPairedRecord", typeof(bool));
    
            var addMoneyXMLParameter = addMoneyXML != null ?
                new ObjectParameter("AddMoneyXML", addMoneyXML) :
                new ObjectParameter("AddMoneyXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountMasterInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, isGroupParameter, groupIDParameter, userIDParameter, typeParameter, isPairedRecordParameter, addMoneyXMLParameter);
        }
    
        public virtual ObjectResult<uspGeneralPaymentsGetById_Result> uspGeneralPaymentsGetById(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGeneralPaymentsGetById_Result>("uspGeneralPaymentsGetById", accountMasterIdParameter);
        }
    
        public virtual ObjectResult<uspMemberReceiptByID_Result> uspMemberReceiptByID(Nullable<long> accountMasterID)
        {
            var accountMasterIDParameter = accountMasterID.HasValue ?
                new ObjectParameter("AccountMasterID", accountMasterID) :
                new ObjectParameter("AccountMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberReceiptByID_Result>("uspMemberReceiptByID", accountMasterIDParameter);
        }
    
        public virtual ObjectResult<uspGroupMeetingLookup_Result> uspGroupMeetingLookup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupMeetingLookup_Result>("uspGroupMeetingLookup", groupIDParameter);
        }
    
        public virtual ObjectResult<uspGroupInterestByID_Result> uspGroupInterestByID(Nullable<int> interestID)
        {
            var interestIDParameter = interestID.HasValue ?
                new ObjectParameter("InterestID", interestID) :
                new ObjectParameter("InterestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupInterestByID_Result>("uspGroupInterestByID", interestIDParameter);
        }
    
        public virtual int uspFederationMeetingInsertUpdate(ObjectParameter federationMeetingID, Nullable<System.DateTime> meetingDate, Nullable<System.TimeSpan> startTime, Nullable<System.TimeSpan> endTime, Nullable<System.DateTime> transactionDate, Nullable<bool> isConducted, string otherReason, Nullable<int> reason, Nullable<bool> isSplMeeting, string meetingObjective, string meetingComments, Nullable<int> userID, string federationMeetingmember)
        {
            var meetingDateParameter = meetingDate.HasValue ?
                new ObjectParameter("MeetingDate", meetingDate) :
                new ObjectParameter("MeetingDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.TimeSpan));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.TimeSpan));
    
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var isConductedParameter = isConducted.HasValue ?
                new ObjectParameter("IsConducted", isConducted) :
                new ObjectParameter("IsConducted", typeof(bool));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            var reasonParameter = reason.HasValue ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(int));
    
            var isSplMeetingParameter = isSplMeeting.HasValue ?
                new ObjectParameter("IsSplMeeting", isSplMeeting) :
                new ObjectParameter("IsSplMeeting", typeof(bool));
    
            var meetingObjectiveParameter = meetingObjective != null ?
                new ObjectParameter("MeetingObjective", meetingObjective) :
                new ObjectParameter("MeetingObjective", typeof(string));
    
            var meetingCommentsParameter = meetingComments != null ?
                new ObjectParameter("MeetingComments", meetingComments) :
                new ObjectParameter("MeetingComments", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var federationMeetingmemberParameter = federationMeetingmember != null ?
                new ObjectParameter("FederationMeetingmember", federationMeetingmember) :
                new ObjectParameter("FederationMeetingmember", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationMeetingInsertUpdate", federationMeetingID, meetingDateParameter, startTimeParameter, endTimeParameter, transactionDateParameter, isConductedParameter, otherReasonParameter, reasonParameter, isSplMeetingParameter, meetingObjectiveParameter, meetingCommentsParameter, userIDParameter, federationMeetingmemberParameter);
        }
    
        public virtual ObjectResult<uspFederationMeetingGetByFederationMeetingID_Result> uspFederationMeetingGetByFederationMeetingID(Nullable<int> federationMeetingID)
        {
            var federationMeetingIDParameter = federationMeetingID.HasValue ?
                new ObjectParameter("FederationMeetingID", federationMeetingID) :
                new ObjectParameter("FederationMeetingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationMeetingGetByFederationMeetingID_Result>("uspFederationMeetingGetByFederationMeetingID", federationMeetingIDParameter);
        }
    
        public virtual int uspJournalEntryInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<decimal> amount, string narration, string partyName, Nullable<int> transactionType, string transactionMode, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userID, string addMoneyXML)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var addMoneyXMLParameter = addMoneyXML != null ?
                new ObjectParameter("AddMoneyXML", addMoneyXML) :
                new ObjectParameter("AddMoneyXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspJournalEntryInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, amountParameter, narrationParameter, partyNameParameter, transactionTypeParameter, transactionModeParameter, isGroupParameter, groupIDParameter, userIDParameter, addMoneyXMLParameter);
        }
    
        public virtual ObjectResult<uspFundSourceGetAll_Result> uspFundSourceGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFundSourceGetAll_Result>("uspFundSourceGetAll");
        }
    
        public virtual ObjectResult<uspFundSourceGetByFundSourceId_Result> uspFundSourceGetByFundSourceId(Nullable<int> fundSourceID)
        {
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFundSourceGetByFundSourceId_Result>("uspFundSourceGetByFundSourceId", fundSourceIDParameter);
        }
    
        public virtual int uspFundSourceInsertUpdate(ObjectParameter fundSourceID, string fundSourceName, string teluguFundsourse, Nullable<int> userID, ObjectParameter fundSourceCode)
        {
            var fundSourceNameParameter = fundSourceName != null ?
                new ObjectParameter("FundSourceName", fundSourceName) :
                new ObjectParameter("FundSourceName", typeof(string));
    
            var teluguFundsourseParameter = teluguFundsourse != null ?
                new ObjectParameter("TeluguFundsourse", teluguFundsourse) :
                new ObjectParameter("TeluguFundsourse", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFundSourceInsertUpdate", fundSourceID, fundSourceNameParameter, teluguFundsourseParameter, userIDParameter, fundSourceCode);
        }
    
        public virtual int uspAccountHeadDiscard(Nullable<int> aHID, Nullable<int> userID, ObjectParameter result, ObjectParameter message)
        {
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspAccountHeadDiscard", aHIDParameter, userIDParameter, result, message);
        }
    
        public virtual ObjectResult<uspLoanPurposeGetAll_Result> uspLoanPurposeGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanPurposeGetAll_Result>("uspLoanPurposeGetAll");
        }
    
        public virtual ObjectResult<uspInterestLookup_Result> uspInterestLookup(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInterestLookup_Result>("uspInterestLookup", typeParameter);
        }
    
        public virtual ObjectResult<uspGroupLoanDisbursementLookup_Result> uspGroupLoanDisbursementLookup(string loanType)
        {
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLoanDisbursementLookup_Result>("uspGroupLoanDisbursementLookup", loanTypeParameter);
        }
    
        public virtual int uspLoanDisbursementChangeStatus(ObjectParameter loanmasterId, ObjectParameter loanCode, ObjectParameter statusCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanDisbursementChangeStatus", loanmasterId, loanCode, statusCode, userIdParameter);
        }
    
        public virtual int uspLoanDisbursementDelete(ObjectParameter loanMasterID, ObjectParameter loanCode, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanDisbursementDelete", loanMasterID, loanCode, userIdParameter);
        }
    
        public virtual ObjectResult<uspGroupLoanApplicationGetViewByLoanMasterID_Result> uspGroupLoanApplicationGetViewByLoanMasterID(Nullable<int> loanMasterId)
        {
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLoanApplicationGetViewByLoanMasterID_Result>("uspGroupLoanApplicationGetViewByLoanMasterID", loanMasterIdParameter);
        }
    
        public virtual ObjectResult<uspInterestByIDByAHName_Result> uspInterestByIDByAHName(Nullable<int> interestID)
        {
            var interestIDParameter = interestID.HasValue ?
                new ObjectParameter("InterestID", interestID) :
                new ObjectParameter("InterestID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInterestByIDByAHName_Result>("uspInterestByIDByAHName", interestIDParameter);
        }
    
        public virtual ObjectResult<uspgroupReceiptByID_Result> uspgroupReceiptByID(Nullable<long> accountMasterID)
        {
            var accountMasterIDParameter = accountMasterID.HasValue ?
                new ObjectParameter("AccountMasterID", accountMasterID) :
                new ObjectParameter("AccountMasterID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspgroupReceiptByID_Result>("uspgroupReceiptByID", accountMasterIDParameter);
        }
    
        public virtual ObjectResult<uspOrganizationGetAllBanksDetails_Result> uspOrganizationGetAllBanksDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspOrganizationGetAllBanksDetails_Result>("uspOrganizationGetAllBanksDetails");
        }
    
        public virtual ObjectResult<uspFederationContraEntryWithDrawlDetailsByAccountMasterID_Result> uspFederationContraEntryWithDrawlDetailsByAccountMasterID(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationContraEntryWithDrawlDetailsByAccountMasterID_Result>("uspFederationContraEntryWithDrawlDetailsByAccountMasterID", accountMasterIdParameter);
        }
    
        public virtual ObjectResult<uspFederationLoanDisbursement_Result> uspFederationLoanDisbursement(Nullable<int> loanMasterID)
        {
            var loanMasterIDParameter = loanMasterID.HasValue ?
                new ObjectParameter("LoanMasterID", loanMasterID) :
                new ObjectParameter("LoanMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationLoanDisbursement_Result>("uspFederationLoanDisbursement", loanMasterIDParameter);
        }
    
        public virtual int uspFederationContraEntryWithDrawlInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string vocharRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var vocharRefNumberParameter = vocharRefNumber != null ?
                new ObjectParameter("VocharRefNumber", vocharRefNumber) :
                new ObjectParameter("VocharRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationContraEntryWithDrawlInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, vocharRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, userIdParameter);
        }
    
        public virtual int uspFederationMeetingLockedById(ObjectParameter federationMeetingId, ObjectParameter isLocked, Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspFederationMeetingLockedById", federationMeetingId, isLocked, userIdParameter);
        }
    
        public virtual ObjectResult<uspFederationMeetingLookup_Result> uspFederationMeetingLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspFederationMeetingLookup_Result>("uspFederationMeetingLookup");
        }
    
        public virtual int uspGeneralReceiptInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> userID, string type, string addMoneyXML)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var addMoneyXMLParameter = addMoneyXML != null ?
                new ObjectParameter("AddMoneyXML", addMoneyXML) :
                new ObjectParameter("AddMoneyXML", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGeneralReceiptInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, isGroupParameter, groupIDParameter, userIDParameter, typeParameter, addMoneyXMLParameter);
        }
    
        public virtual ObjectResult<uspEmployeeGetByID_Result> uspEmployeeGetByID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeGetByID_Result>("uspEmployeeGetByID", employeeIDParameter);
        }
    
        public virtual ObjectResult<AccoutHeadGroupLevelByID_Result> AccoutHeadGroupLevelByID(Nullable<int> aHID, string aHName)
        {
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var aHNameParameter = aHName != null ?
                new ObjectParameter("AHName", aHName) :
                new ObjectParameter("AHName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AccoutHeadGroupLevelByID_Result>("AccoutHeadGroupLevelByID", aHIDParameter, aHNameParameter);
        }
    
        public virtual int uspLoanPurposeInsertUpdate(ObjectParameter loanPurposeID, Nullable<int> category, Nullable<int> project, string purpose, string tELoanpurpose, Nullable<int> userID, ObjectParameter loanPurposeCode)
        {
            var categoryParameter = category.HasValue ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(int));
    
            var projectParameter = project.HasValue ?
                new ObjectParameter("Project", project) :
                new ObjectParameter("Project", typeof(int));
    
            var purposeParameter = purpose != null ?
                new ObjectParameter("Purpose", purpose) :
                new ObjectParameter("Purpose", typeof(string));
    
            var tELoanpurposeParameter = tELoanpurpose != null ?
                new ObjectParameter("TELoanpurpose", tELoanpurpose) :
                new ObjectParameter("TELoanpurpose", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanPurposeInsertUpdate", loanPurposeID, categoryParameter, projectParameter, purposeParameter, tELoanpurposeParameter, userIDParameter, loanPurposeCode);
        }
    
        public virtual int uspMemberInsertUpdate(ObjectParameter memberID, ObjectParameter memberCode, string memberRefCode, string surName, string tESurName, string memberName, string tEMemberName, string photo, Nullable<int> groupID, string gender, Nullable<System.DateTime> dateOfAdmission, Nullable<int> educationQualification, string mobileNumber, string email, Nullable<System.DateTime> dOB, Nullable<int> occupationID, Nullable<bool> disability, string maritalStatus, Nullable<int> userID, Nullable<System.DateTime> dateOfRetirement, Nullable<int> religion)
        {
            var memberRefCodeParameter = memberRefCode != null ?
                new ObjectParameter("MemberRefCode", memberRefCode) :
                new ObjectParameter("MemberRefCode", typeof(string));
    
            var surNameParameter = surName != null ?
                new ObjectParameter("SurName", surName) :
                new ObjectParameter("SurName", typeof(string));
    
            var tESurNameParameter = tESurName != null ?
                new ObjectParameter("TESurName", tESurName) :
                new ObjectParameter("TESurName", typeof(string));
    
            var memberNameParameter = memberName != null ?
                new ObjectParameter("MemberName", memberName) :
                new ObjectParameter("MemberName", typeof(string));
    
            var tEMemberNameParameter = tEMemberName != null ?
                new ObjectParameter("TEMemberName", tEMemberName) :
                new ObjectParameter("TEMemberName", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(string));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dateOfAdmissionParameter = dateOfAdmission.HasValue ?
                new ObjectParameter("DateOfAdmission", dateOfAdmission) :
                new ObjectParameter("DateOfAdmission", typeof(System.DateTime));
    
            var educationQualificationParameter = educationQualification.HasValue ?
                new ObjectParameter("EducationQualification", educationQualification) :
                new ObjectParameter("EducationQualification", typeof(int));
    
            var mobileNumberParameter = mobileNumber != null ?
                new ObjectParameter("MobileNumber", mobileNumber) :
                new ObjectParameter("MobileNumber", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var occupationIDParameter = occupationID.HasValue ?
                new ObjectParameter("OccupationID", occupationID) :
                new ObjectParameter("OccupationID", typeof(int));
    
            var disabilityParameter = disability.HasValue ?
                new ObjectParameter("Disability", disability) :
                new ObjectParameter("Disability", typeof(bool));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var dateOfRetirementParameter = dateOfRetirement.HasValue ?
                new ObjectParameter("DateOfRetirement", dateOfRetirement) :
                new ObjectParameter("DateOfRetirement", typeof(System.DateTime));
    
            var religionParameter = religion.HasValue ?
                new ObjectParameter("Religion", religion) :
                new ObjectParameter("Religion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspMemberInsertUpdate", memberID, memberCode, memberRefCodeParameter, surNameParameter, tESurNameParameter, memberNameParameter, tEMemberNameParameter, photoParameter, groupIDParameter, genderParameter, dateOfAdmissionParameter, educationQualificationParameter, mobileNumberParameter, emailParameter, dOBParameter, occupationIDParameter, disabilityParameter, maritalStatusParameter, userIDParameter, dateOfRetirementParameter, religionParameter);
        }
    
        public virtual ObjectResult<uspLoanPurposeLookup_Result> uspLoanPurposeLookup()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanPurposeLookup_Result>("uspLoanPurposeLookup");
        }
    
        public virtual ObjectResult<uspLoanPurposeGetByLoanPurposeId_Result> uspLoanPurposeGetByLoanPurposeId(Nullable<int> loanPurposeID)
        {
            var loanPurposeIDParameter = loanPurposeID.HasValue ?
                new ObjectParameter("LoanPurposeID", loanPurposeID) :
                new ObjectParameter("LoanPurposeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanPurposeGetByLoanPurposeId_Result>("uspLoanPurposeGetByLoanPurposeId", loanPurposeIDParameter);
        }
    
        public virtual ObjectResult<uspInterestGetAll_Result> uspInterestGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspInterestGetAll_Result>("uspInterestGetAll");
        }
    
        public virtual ObjectResult<uspMemberGetByMemberID_Result> uspMemberGetByMemberID(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberGetByMemberID_Result>("uspMemberGetByMemberID", memberIDParameter);
        }
    
        public virtual ObjectResult<UspMemberLeadershiplookup_Result> UspMemberLeadershiplookup(Nullable<int> memberID)
        {
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UspMemberLeadershiplookup_Result>("UspMemberLeadershiplookup", memberIDParameter);
        }
    
        public virtual ObjectResult<uspGroupInterestGetAll_Result> uspGroupInterestGetAll(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupInterestGetAll_Result>("uspGroupInterestGetAll", groupIdParameter);
        }
    
        public virtual ObjectResult<uspLoanPurposeDetailsByProjectID_Result> uspLoanPurposeDetailsByProjectID(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("ProjectID", projectID) :
                new ObjectParameter("ProjectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspLoanPurposeDetailsByProjectID_Result>("uspLoanPurposeDetailsByProjectID", projectIDParameter);
        }
    
        public virtual ObjectResult<uspGroupContraEntryWithDrawlDetailsByAccountMasterID_Result> uspGroupContraEntryWithDrawlDetailsByAccountMasterID(Nullable<long> accountMasterId)
        {
            var accountMasterIdParameter = accountMasterId.HasValue ?
                new ObjectParameter("AccountMasterId", accountMasterId) :
                new ObjectParameter("AccountMasterId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupContraEntryWithDrawlDetailsByAccountMasterID_Result>("uspGroupContraEntryWithDrawlDetailsByAccountMasterID", accountMasterIdParameter);
        }
    
        public virtual int uspGroupContraEntryWithDrawlInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string vocharRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupId, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var vocharRefNumberParameter = vocharRefNumber != null ?
                new ObjectParameter("VocharRefNumber", vocharRefNumber) :
                new ObjectParameter("VocharRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupContraEntryWithDrawlInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, vocharRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIdParameter, userIdParameter);
        }
    
        public virtual int uspGroupContraEntryDepositedInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string vocharRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupId, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var vocharRefNumberParameter = vocharRefNumber != null ?
                new ObjectParameter("VocharRefNumber", vocharRefNumber) :
                new ObjectParameter("VocharRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupContraEntryDepositedInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, vocharRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIdParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspEmployeeGetAll_Result> uspEmployeeGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspEmployeeGetAll_Result>("uspEmployeeGetAll");
        }
    
        public virtual ObjectResult<uspGroupLoanApplicationGetByLoanMasterID_Result> uspGroupLoanApplicationGetByLoanMasterID(Nullable<int> loanMasterId)
        {
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupLoanApplicationGetByLoanMasterID_Result>("uspGroupLoanApplicationGetByLoanMasterID", loanMasterIdParameter);
        }
    
        public virtual ObjectResult<uspMemberLoanApplicationGetByLoanMasterID_Result> uspMemberLoanApplicationGetByLoanMasterID(Nullable<int> loanMasterId)
        {
            var loanMasterIdParameter = loanMasterId.HasValue ?
                new ObjectParameter("LoanMasterId", loanMasterId) :
                new ObjectParameter("LoanMasterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberLoanApplicationGetByLoanMasterID_Result>("uspMemberLoanApplicationGetByLoanMasterID", loanMasterIdParameter);
        }
    
        public virtual int uspGroupInsertUpdate(ObjectParameter groupID, string groupRefNumber, string groupName, string tEGroupName, Nullable<int> panchayatID, Nullable<System.DateTime> formationDate, string phone, string email, string address, Nullable<int> meetingFrequency, Nullable<System.DateTime> federationTranStartDate, Nullable<System.DateTime> dateOfClosure, Nullable<byte> meetingDay, Nullable<System.TimeSpan> meetingStartTime, Nullable<System.TimeSpan> meetingEndTime, Nullable<decimal> regularSavingAmount, Nullable<int> regularSavingAHID, Nullable<int> userID, ObjectParameter groupCode)
        {
            var groupRefNumberParameter = groupRefNumber != null ?
                new ObjectParameter("GroupRefNumber", groupRefNumber) :
                new ObjectParameter("GroupRefNumber", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var tEGroupNameParameter = tEGroupName != null ?
                new ObjectParameter("TEGroupName", tEGroupName) :
                new ObjectParameter("TEGroupName", typeof(string));
    
            var panchayatIDParameter = panchayatID.HasValue ?
                new ObjectParameter("PanchayatID", panchayatID) :
                new ObjectParameter("PanchayatID", typeof(int));
    
            var formationDateParameter = formationDate.HasValue ?
                new ObjectParameter("FormationDate", formationDate) :
                new ObjectParameter("FormationDate", typeof(System.DateTime));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var meetingFrequencyParameter = meetingFrequency.HasValue ?
                new ObjectParameter("MeetingFrequency", meetingFrequency) :
                new ObjectParameter("MeetingFrequency", typeof(int));
    
            var federationTranStartDateParameter = federationTranStartDate.HasValue ?
                new ObjectParameter("FederationTranStartDate", federationTranStartDate) :
                new ObjectParameter("FederationTranStartDate", typeof(System.DateTime));
    
            var dateOfClosureParameter = dateOfClosure.HasValue ?
                new ObjectParameter("DateOfClosure", dateOfClosure) :
                new ObjectParameter("DateOfClosure", typeof(System.DateTime));
    
            var meetingDayParameter = meetingDay.HasValue ?
                new ObjectParameter("MeetingDay", meetingDay) :
                new ObjectParameter("MeetingDay", typeof(byte));
    
            var meetingStartTimeParameter = meetingStartTime.HasValue ?
                new ObjectParameter("MeetingStartTime", meetingStartTime) :
                new ObjectParameter("MeetingStartTime", typeof(System.TimeSpan));
    
            var meetingEndTimeParameter = meetingEndTime.HasValue ?
                new ObjectParameter("MeetingEndTime", meetingEndTime) :
                new ObjectParameter("MeetingEndTime", typeof(System.TimeSpan));
    
            var regularSavingAmountParameter = regularSavingAmount.HasValue ?
                new ObjectParameter("RegularSavingAmount", regularSavingAmount) :
                new ObjectParameter("RegularSavingAmount", typeof(decimal));
    
            var regularSavingAHIDParameter = regularSavingAHID.HasValue ?
                new ObjectParameter("RegularSavingAHID", regularSavingAHID) :
                new ObjectParameter("RegularSavingAHID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGroupInsertUpdate", groupID, groupRefNumberParameter, groupNameParameter, tEGroupNameParameter, panchayatIDParameter, formationDateParameter, phoneParameter, emailParameter, addressParameter, meetingFrequencyParameter, federationTranStartDateParameter, dateOfClosureParameter, meetingDayParameter, meetingStartTimeParameter, meetingEndTimeParameter, regularSavingAmountParameter, regularSavingAHIDParameter, userIDParameter, groupCode);
        }
    
        public virtual int uspLoanApplicationInsertUpdate(ObjectParameter loanMasterID, ObjectParameter loanCode, string loanType, Nullable<int> memberID, Nullable<int> groupID, Nullable<System.DateTime> loanApplicationDate, Nullable<int> loanPurpose, Nullable<int> fundSourceID, Nullable<int> projectId, Nullable<decimal> loanAmountApplied, Nullable<byte> noofInstallmentsProposed, Nullable<int> mode, Nullable<int> userId, Nullable<int> interestMasterID)
        {
            var loanTypeParameter = loanType != null ?
                new ObjectParameter("LoanType", loanType) :
                new ObjectParameter("LoanType", typeof(string));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var loanApplicationDateParameter = loanApplicationDate.HasValue ?
                new ObjectParameter("LoanApplicationDate", loanApplicationDate) :
                new ObjectParameter("LoanApplicationDate", typeof(System.DateTime));
    
            var loanPurposeParameter = loanPurpose.HasValue ?
                new ObjectParameter("LoanPurpose", loanPurpose) :
                new ObjectParameter("LoanPurpose", typeof(int));
    
            var fundSourceIDParameter = fundSourceID.HasValue ?
                new ObjectParameter("FundSourceID", fundSourceID) :
                new ObjectParameter("FundSourceID", typeof(int));
    
            var projectIdParameter = projectId.HasValue ?
                new ObjectParameter("ProjectId", projectId) :
                new ObjectParameter("ProjectId", typeof(int));
    
            var loanAmountAppliedParameter = loanAmountApplied.HasValue ?
                new ObjectParameter("LoanAmountApplied", loanAmountApplied) :
                new ObjectParameter("LoanAmountApplied", typeof(decimal));
    
            var noofInstallmentsProposedParameter = noofInstallmentsProposed.HasValue ?
                new ObjectParameter("NoofInstallmentsProposed", noofInstallmentsProposed) :
                new ObjectParameter("NoofInstallmentsProposed", typeof(byte));
    
            var modeParameter = mode.HasValue ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var interestMasterIDParameter = interestMasterID.HasValue ?
                new ObjectParameter("InterestMasterID", interestMasterID) :
                new ObjectParameter("InterestMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLoanApplicationInsertUpdate", loanMasterID, loanCode, loanTypeParameter, memberIDParameter, groupIDParameter, loanApplicationDateParameter, loanPurposeParameter, fundSourceIDParameter, projectIdParameter, loanAmountAppliedParameter, noofInstallmentsProposedParameter, modeParameter, userIdParameter, interestMasterIDParameter);
        }
    
        public virtual ObjectResult<uspMemberReceiptInsertUpdate_Result> uspMemberReceiptInsertUpdate(ObjectParameter accountMasterID, Nullable<System.DateTime> transactionDate, ObjectParameter voucherNumber, string voucherRefNumber, Nullable<long> codeSno, string partyName, Nullable<int> employeeID, Nullable<int> aHID, Nullable<int> subHeadID, Nullable<int> transactionType, Nullable<decimal> amount, string transactionMode, string chequeNumber, Nullable<System.DateTime> chequeDate, Nullable<int> bankAccount, string narration, string transcationXML, Nullable<bool> isGroup, Nullable<int> groupID, Nullable<int> memberID, Nullable<int> userId)
        {
            var transactionDateParameter = transactionDate.HasValue ?
                new ObjectParameter("TransactionDate", transactionDate) :
                new ObjectParameter("TransactionDate", typeof(System.DateTime));
    
            var voucherRefNumberParameter = voucherRefNumber != null ?
                new ObjectParameter("VoucherRefNumber", voucherRefNumber) :
                new ObjectParameter("VoucherRefNumber", typeof(string));
    
            var codeSnoParameter = codeSno.HasValue ?
                new ObjectParameter("CodeSno", codeSno) :
                new ObjectParameter("CodeSno", typeof(long));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var aHIDParameter = aHID.HasValue ?
                new ObjectParameter("AHID", aHID) :
                new ObjectParameter("AHID", typeof(int));
    
            var subHeadIDParameter = subHeadID.HasValue ?
                new ObjectParameter("SubHeadID", subHeadID) :
                new ObjectParameter("SubHeadID", typeof(int));
    
            var transactionTypeParameter = transactionType.HasValue ?
                new ObjectParameter("TransactionType", transactionType) :
                new ObjectParameter("TransactionType", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var transactionModeParameter = transactionMode != null ?
                new ObjectParameter("TransactionMode", transactionMode) :
                new ObjectParameter("TransactionMode", typeof(string));
    
            var chequeNumberParameter = chequeNumber != null ?
                new ObjectParameter("ChequeNumber", chequeNumber) :
                new ObjectParameter("ChequeNumber", typeof(string));
    
            var chequeDateParameter = chequeDate.HasValue ?
                new ObjectParameter("ChequeDate", chequeDate) :
                new ObjectParameter("ChequeDate", typeof(System.DateTime));
    
            var bankAccountParameter = bankAccount.HasValue ?
                new ObjectParameter("BankAccount", bankAccount) :
                new ObjectParameter("BankAccount", typeof(int));
    
            var narrationParameter = narration != null ?
                new ObjectParameter("Narration", narration) :
                new ObjectParameter("Narration", typeof(string));
    
            var transcationXMLParameter = transcationXML != null ?
                new ObjectParameter("TranscationXML", transcationXML) :
                new ObjectParameter("TranscationXML", typeof(string));
    
            var isGroupParameter = isGroup.HasValue ?
                new ObjectParameter("IsGroup", isGroup) :
                new ObjectParameter("IsGroup", typeof(bool));
    
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberReceiptInsertUpdate_Result>("uspMemberReceiptInsertUpdate", accountMasterID, transactionDateParameter, voucherNumber, voucherRefNumberParameter, codeSnoParameter, partyNameParameter, employeeIDParameter, aHIDParameter, subHeadIDParameter, transactionTypeParameter, amountParameter, transactionModeParameter, chequeNumberParameter, chequeDateParameter, bankAccountParameter, narrationParameter, transcationXMLParameter, isGroupParameter, groupIDParameter, memberIDParameter, userIdParameter);
        }
    
        public virtual ObjectResult<uspGroupMeetingGetById_Result> uspGroupMeetingGetById(Nullable<int> groupMeetingID)
        {
            var groupMeetingIDParameter = groupMeetingID.HasValue ?
                new ObjectParameter("GroupMeetingID", groupMeetingID) :
                new ObjectParameter("GroupMeetingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupMeetingGetById_Result>("uspGroupMeetingGetById", groupMeetingIDParameter);
        }
    
        public virtual ObjectResult<uspMemberReceiptLookup_Result> uspMemberReceiptLookup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberReceiptLookup_Result>("uspMemberReceiptLookup", groupIdParameter);
        }
    
        public virtual ObjectResult<uspMemberLoanDisbursementLookup_Result> uspMemberLoanDisbursementLookup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberLoanDisbursementLookup_Result>("uspMemberLoanDisbursementLookup", groupIDParameter);
        }
    
        public virtual ObjectResult<uspslaccountsgetbyparentahid_Result> uspslaccountsgetbyparentahid(Nullable<int> parentAHID, Nullable<int> groupId)
        {
            var parentAHIDParameter = parentAHID.HasValue ?
                new ObjectParameter("ParentAHID", parentAHID) :
                new ObjectParameter("ParentAHID", typeof(int));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspslaccountsgetbyparentahid_Result>("uspslaccountsgetbyparentahid", parentAHIDParameter, groupIdParameter);
        }
    
        public virtual ObjectResult<uspGroupGeneralPaymentsLookup_Result> uspGroupGeneralPaymentsLookup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGeneralPaymentsLookup_Result>("uspGroupGeneralPaymentsLookup", groupIDParameter);
        }
    
        public virtual ObjectResult<uspMemberLoanApplicationLookup_Result> uspMemberLoanApplicationLookup(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspMemberLoanApplicationLookup_Result>("uspMemberLoanApplicationLookup", groupIDParameter);
        }
    
        public virtual ObjectResult<uspGroupContraEntryDepositedLookup_Result> uspGroupContraEntryDepositedLookup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupContraEntryDepositedLookup_Result>("uspGroupContraEntryDepositedLookup", groupIdParameter);
        }
    
        public virtual ObjectResult<uspGroupContraEntryWithDrawlLookup_Result> uspGroupContraEntryWithDrawlLookup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupContraEntryWithDrawlLookup_Result>("uspGroupContraEntryWithDrawlLookup", groupIdParameter);
        }
    
        public virtual ObjectResult<uspGroupGetByGroupId_Result> uspGroupGetByGroupId(Nullable<int> groupID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGroupGetByGroupId_Result>("uspGroupGetByGroupId", groupIDParameter);
        }
    }
}
