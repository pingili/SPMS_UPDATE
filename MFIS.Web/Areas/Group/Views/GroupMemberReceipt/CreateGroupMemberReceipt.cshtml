@using CoreComponents;
@using BusinessEntities;
@model BusinessEntities.GroupMemberReceiptDto
@{
    ViewBag.Title = "CreateMemberReceipt";
    Layout = "~/Views/Shared/_GroupLayout.cshtml";
}
@using (Html.BeginForm())
{
    int Count = 0;
    ResultDto res = ViewBag.Result;
    string voucherNumber = "N/A";
    List<GroupMemberReceiptTranDto> lst = new List<GroupMemberReceiptTranDto>();
    if (Model != null && !string.IsNullOrWhiteSpace(Model.VoucherNumber))
    {
        voucherNumber = Model.VoucherNumber;
        lst = Model.Transactions;
    }
    else
    {
        lst = ViewBag.AccountHeadsTeplate;
    }

    <div class="row">
        <div class="col-lg-12">
            <!-- Form Elements -->
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <span class="header">
                        Group Member Receipt &nbsp;<label>Vocher Number</label>
                        : @voucherNumber
                    </span>
                    @Html.HiddenFor(m => m.AccountMasterID)
                    @Html.ActionLink("Back to List", "GroupMemberReceiptLookUp", null, new { @class = "btn btn-default pull-right" })
                </div>
                <div class="panel-body" style="padding: 1px 15px;">
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Member Name</label>
                                @Html.DropDownListFor(d => Model.MemberId, (SelectList)ViewBag.grpMembers, "Select Member", new { @class = "form-control required", @id = "MemberId" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Transaction Mode</label><br />
                                @Html.DropDownListFor(m => m.TransactionMode, new List<SelectListItem>
                                 {
                                    new SelectListItem{ Text="Cash", Value = "C" },
                                    new SelectListItem{ Text="Cash Deposit at Bank", Value = "BD" },
                                    new SelectListItem {Text="Cheque Deposit at Bank",Value="BC" }
                                 }, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Transaction Date</label><br />
                                @Html.DropDownListFor(m => m.TransactionDate, (SelectList)ViewBag.MonthMeetings, "Select Date", new { @class = "form-control", @id = "TransactionDate" })
                                <input type="text" value="@Model.TransactionDate.ToDisplayDateFormat()" class="form-control required  one-month-enable-date-picker" id="txtTransactionDate" name="txtTransactionDate" placeholder="Select TransactionDate" readonly="true" style="display:none;" />
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Amount</label>
                                @Html.TextBox("TotalAmount", Model.TotalAmount.ToDisplayCurrency(), new { @class = "form-control required number-only", @style = "width:95%;", @id = "TotalAmount" })
                            </div>
                        </div>
                        <div class="col-lg-3 dv-cheque">
                            <div class="form-group">
                                <label>Cheque Number</label>
                                @Html.TextBoxFor(m => m.ChequeNumber, null, new { @class = "form-control number-only", @id = "ChequeNumber" })
                            </div>
                        </div>
                        <div class="col-lg-3 dv-cheque">
                            <div class="form-group">
                                <label>Cheque Date</label>
                                <input type="text" value="@Model.ChequeDate.ToDisplayDateFormat()" class="form-control" id="ChequeDate" name="ChequeDate" placeholder="Select ChequeDate" readonly="true" />
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Vocher RefNumber</label>
                                @Html.TextBoxFor(m => m.VoucherRefNumber, new { @class = "form-control alphanumeric-only" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Collection Agent</label>
                                @Html.DropDownListFor(m => m.CollectionAgent, (SelectList)ViewBag.slEmp, null, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                    @*<div class="row">
                            <div class="col-lg-6">
                                <label style="font: 500">From (Cr.)</label>
                                <hr style="margin: 1px;" />
                            </div>
                        </div>*@
                    <div class="row">
                        <div class="col-lg-12">
                            <table class="table table-striped table-bordered table-hover" id="tblgropureceipt" style="font-size: 12px; margin: 0;">
                                <thead>
                                    <tr>
                                        <th class="col-sm-1 text-center" style="width: 2%;">#</th>
                                        <th class="col-sm-3">G.L Account Head</th>
                                        <th class="col-sm-2">S.L Account Head</th>
                                        <th class="col-sm-1 text-right" style="width: 4%;">Demand</th>
                                        <th class="col-sm-2 text-right" style="width: 4%;">Amount Received(Cr)</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    @foreach (var obj in lst)
                                    {

                                        <tr class="gradeA odd">
                                            <td class="text-center">
                                                @(++Count)
                                                <input type="hidden" id="hdnCount_@obj.SLAccountId" name="hdnCount_@obj.SLAccountId" value="@Count" />
                                                <input type="hidden" id="hdnSlAccountID_@Count" name="hdnSlAccountID_@Count" value="@obj.SLAccountId" />
                                                <input type="hidden" id="hdnSubAHID_@Count" name="hdnSubAHID_@Count" value="@obj.SubAhId" />
                                            </td>
                                            <td>
                                                @obj.GLAccount
                                                <input type="hidden" id="hdnGlAccount_@Count" name="hdnGlAccount_@Count" value="@obj.GLAccount" />
                                            </td>
                                            <td>
                                                <span id="spnSLAhName_@Count">@obj.SLAccount</span>
                                                <span id="spnRefNumber_@Count">@obj.ReferenceNumber</span>
                                                <input type="hidden" id="hdnSlAccount_@Count" name="hdnSlAccount_@Count" value="@obj.SLAccount" />
                                                <input type="hidden" id="hdnRefNumber_@Count" name="hdnRefNumber_@Count" value="@obj.ReferenceNumber" />
                                            </td>
                                            <td class="text-right"><span id="spn_@Count" class="spnDemand">0</span></td>
                                            <td class="text-right">
                                                <input style="text-align:right;" type="text" id="CrAmount_@Count" name="CrAmount_@Count" value="@obj.Amount.ToDisplayCurrency()" class="Amount" onkeypress="return validateNumbersOnly(event);" />
                                            </td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="3" class="text-right">
                                            <span><strong>Total Amount :</strong></span>
                                            <input type="hidden" id="hdnMaxTranCount" name="hdnMaxTranCount" value=@Count />
                                        </td>
                                        <td class="text-right">
                                            <label id="spn_DemandTotal"></label>
                                        </td>
                                        <td class="pull-right">
                                            <label id="lblBalance" style="font-size: small"></label>
                                            <input type="hidden" id="hdnTotalAmount" name="hdnTotalAmount" />
                                        </td>
                                    </tr>

                                </tbody>
                            </table>

                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>To Account Head(Dr.)</label>
                                <input id="txtToHead" type="text" value="" class="form-control" readonly />
                            </div>
                        </div>
                        <div class="col-lg-3" id="dvToBank">
                            <div class="form-group">
                                <label>Group Bank Account</label>
                                @Html.DropDownListFor(m => m.BankEntryId, (SelectList)ViewBag.slBankAh, "Select Bank Account Head", new { @class = "form-control required" })
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="form-group">
                                <label>Narration</label>
                                @Html.TextAreaFor(m => m.Narration, new { @class = "form-control alphabet-only" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="form-group" style="margin-left: 16px;">
                        <input type="hidden" id="hdnAHCount" name="hdnAHCount" value="@Count" />
                        <button type="submit" class="btn btn-outline btn-primary lock-dependent" onclick="return validateMemberReceipt();">Submit</button>
                        <button type="button" class="btn btn-outline btn-primary" onclick="return resetall('')">Reset</button>
                        <button type="button" class="btn btn-default pull-right" onclick="BackToList();">Back To List</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/jqueryui")
@Styles.Render("~/Content/cssjqryUi")
<style>
    .form-control {
        padding: 2px 2px;
        height: 25px;
        border-radius: 1px;
    }

    .panel-heading {
        padding: 2px 15px;
        border-bottom: 1px solid transparent;
        border-top-left-radius: 3px;
        border-top-right-radius: 3px;
        line-height: 29px;
    }

    .Amount {
        width: 80px;
    }
</style>

<script type="text/javascript">
    $(document).ready(function () {
        menuLink = "menuTransactions";
        subMenuLink = "lnkSideGroupReceipt";
        LoadMenu();
    });

    function BackToList() {
        showProgress();
        window.location.href = '@Url.Content("GroupMemberReceiptLookUp")';
    }

    function TransactionModeChange() {
        var tMode = $('#TransactionMode').val();
        $('.dv-cheque').hide();
        if (tMode == "C") {
            $('#dvToBank').hide();
            $('#txtToHead').val('Cash In Hand');
            $('#TransactionDate').show();
            $('#txtTransactionDate').hide();
        } else {
            $('#TransactionDate').hide();
            $('#txtTransactionDate').show();
            $('#txtToHead').val('Cash at Bank');
            $('#dvToBank').show();
            if (tMode == "BC") {
                $('.dv-cheque').show();
            }
        }
    }

    function calculatetotal() {
        var crTotal = 0;
        $('input[id*="CrAmount_"]').each(function (item, value) {
            crTotal = crTotal + Number($(value).val());
        });
        return crTotal;
    }

    function TotalCalculation() {
        var total = calculatetotal();
        $('#lblBalance').html(Number(total));
        $('#hdnTotalAmount').val(Number(total));
    }

    $(document).ready(function () {
        var transactionDate = '@(Model != null ? Model.TransactionDate.ToDisplayDateFormat() : string.Empty)';
        $('#TransactionDate').val(transactionDate);
        TransactionModeChange();
        LoadDemands();
        TotalCalculation();

        $('#TransactionMode').on('change', function () {
            TransactionModeChange();
        });

        $('#TotalAmount').change(function () {
            if ($('#MemberId,#TransactionDate,#txtTransactionDate').val() != '') {
                var amount = Number($('#TotalAmount').val());
                var demandamount = $('#spn_DemandTotal').html();
                if (Number(amount) > Number(demandamount)) {
                    alert('Deposit amount is greater than the demand total amount please check')
                }

                $('span[id*="spn_"]').each(function (item, value) {
                    if ($(value).html() != '0' && amount > 0) {
                        if (Number(amount) > Number($(value).html())) {
                            $('#CrAmount_' + this.id.split('_')[1]).val(Number($(value).html()));
                            amount = amount - Number($(value).html());
                        }
                        else {
                            $('#CrAmount_' + this.id.split('_')[1]).val(Number(amount));
                            amount = amount - amount;
                        }
                    }
                });
                var crTotal = 0;
                $('input[id*="CrAmount_"]').each(function (item, value) {
                    crTotal = crTotal + Number($(value).val());
                });
                $('#lblBalance').html(Number(crTotal));
                $('#hdnTotalAmount').val(Number(crTotal));
            }
            else {
                alert('Please select member, transaction type and transaction date');
                return false;
            }
        });

        $('input[id*="CrAmount_"]').change(function () {
            TotalCalculation();
        });

        $('#GLAccountId').change(function () {
            LoadSlAccountHeadsByGlAhId();
        });

        $('#ChequeDate').datepicker({
            dateFormat: "dd/M/yy",
            changeMonth: true,
            changeYear: true,
            yearRange: "-10:+20",
            minDate: __currentOpenMonth,
            defaultDate: __currentOpenMonth
        });

        $('#MemberId,#TransactionDate,#txtTransactionDate').change(function () {
            LoadDemands();
        });
    });

    function LoadDemands() {
        var MemberId = $('#MemberId').val();
        var TransactionDate = '';
        var mode = $('#TransactionMode').val();
        if (mode == 'C')
            TransactionDate = $('#TransactionDate').val();
        else {
            TransactionDate = $('#txtTransactionDate').val();
        }
        if (MemberId == '' || TransactionDate == '') {
            $('.spnDemand').text(0)
            return false;
        }

        $.ajax({
            url: 'GetMemberReceiptDemands/GroupMemberReceipt/',
            type: 'POST',
            data: { memberid: MemberId, transactiondate: TransactionDate },
            error: function () { },
            dataType: 'json',
            success: function (data) {
                debugger;
                if (data.demands != null) {
                    $(data.demands).each(function () {
                        debugger;
                        var counter = Number($('#hdnCount_' + this.SLAhId).val());

                        var isSub = this.SubAhId > 0;

                        if (isSub) {
                            $('#hdnSubAHID_' + counter).val(this.SubAhId);
                            $('#spnRefNumber_' + counter).text(this.ReferenceNumber);
                            $('#hdnRefNumber_' + counter).text(this.ReferenceNumber);
                        }

                        var demand = Number(this.Demand);
                        if ($('#spn_' + counter)) {
                            $('#spn_' + counter).text(demand);
                        }
                    });
                    $('#spn_DemandTotal').html(Number(data.totaldemands));
                }
            },

        }, 'json');
    }

    function validateMemberReceipt() {
        var mode = $('#TransactionMode').val();
        if (mode == "C") {
            if ($('#TransactionDate').val() == "") {
                $('#TransactionDate').css('border-color', 'red');
                return false;
            } else {
                $('#TransactionDate').css('border-color', '');
            }
        } else {
            if ($('#txtTransactionDate').val() == "") {
                $('#txtTransactionDate').css('border-color', 'red');
                return false;
            } else {
                $('#txtTransactionDate').css('border-color', '');
            }
        }
        var amount = Number($('#TotalAmount').val());
        if (!amount) {
            $('#TotalAmount').css('border-color', 'red');
            return false;
        } else {
            $('#TotalAmount').css('border-color', '');
        }

        if (mode == "BC" && $('#ChequeNumber').val() == '') {
            $('#ChequeNumber').css('border-color', 'red');
            return false;
        } else {
            $('#ChequeNumber').css('border-color', '');
        }

        if (mode != "C") {
            if ($('#BankEntryId').val() == '') {
                $('#BankEntryId').css('border-color', 'red');
                return false;
            } else {
                $('#BankEntryId').css('border-color', '');
            }
        }

        debugger;
        var totalAssignedAmount = Number($.trim($('#lblBalance').text()));
        if (amount != totalAssignedAmount) {
            alert('Given Amount should be equal to Total Amount.');
            return false;
        }
        return true;
    }



    //function validate() {
    //    debugger;
    //    var validate = true;
    //    if ($.trim($('#txtTransactionDate').val()) == '' && $.trim($('#ddlGLAccountHead').val()) == '' && $.trim($('#CrAmount').val()) == '') {
    //        $('#txtTransactionDate,#ddlGLAccountHead,#CrAmount').css('border-color', 'red');
    //        validate = false;
    //    }
    //    else {
    //        $('#txtTransactionDate,#ddlGLAccountHead,#CrAmount').css('border-color', '');

    //    }
    //    if ($.trim($('#txtTransactionDate').val()) == '') {
    //        $('#txtTransactionDate').css('border-color', 'red');
    //        validate = false;
    //    }
    //    else {
    //        $('#txtTransactionDate').css('border-color', '');

    //    }

    //    return validate;
    //}

    function BindDropDownOptions(id) {
        $.post('@Url.Action("GetSLAccouts")' + '/' + id, {},
              function (data) {
                  $('#SLAcName').val(data.SLAccounts);
              }, 'json');
    }
</script>

