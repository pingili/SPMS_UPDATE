@model BusinessEntities.MemberLoanDisbursementDto
@using CoreComponents;
@using BusinessEntities;
@{
    ViewBag.Title = "CreateMemberLoanApplication";
    Layout = "~/Views/Shared/_GroupLayout.cshtml";
    string ecnloanmasterid = Model.LoanMasterId > 0 ? Model.LoanMasterId.EncryptString() : string.Empty;
}
<style type="text/css">
    .nav > li > a {
        padding: 15px 15px;
    }

    #tblApprovals th {
        vertical-align: middle;
        text-align: left;
    }
</style>
@using (Html.BeginForm("CreateMemberLoanDisbursementNew", "MemberLoanDisbursement", FormMethod.Post))
{
    bool isView = ViewBag.isView != null ? ViewBag.isView : false;
    string statusCode = Model.StatusCode;
    ResultDto res = TempData["Result"] != null ? TempData["Result"] as ResultDto : null;
    string message = res != null ? res.Message : string.Empty;

    <div class="row">
        <div class="col-lg-12">
            <!-- Form Elements -->
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <span class="header">Member Loan - @Model.LoanCode  @(!string.IsNullOrWhiteSpace(Model.Status) ? "(" + Model.Status + ")" : "")</span>
                    <button type="button" class="btn btn-default pull-right" onclick="BackToList();">Back To List</button>
                </div>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert @(res.ObjectId > 0 ? "alert-success" : "alert-danger")">
                        <strong>@(res.ObjectId > 0 ? "Success" : "Error")!</strong> @message
                    </div>
                }
                <div class="panel-body">
                    @Html.HiddenFor(m => m.LoanMasterId)
                    @Html.HiddenFor(m => m.MemberID)
                    <div class="row" id="dvMain">
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Member Name</label><br>
                                @Html.TextBoxFor(m => m.MemberName, new { @disabled = "disabled", @class = "form-control" })
                                @Html.HiddenFor(m => m.LoanCode)
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Loan Application Date</label><br>
                                @Html.TextBox("LoanApplicationDate", Model.LoanApplicationDate.ToDisplayDateFormat(), new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Loan Amount Applied</label>
                                @Html.TextBox("LoanAmountApplied", Model.LoanAmountApplied.ToDisplayCurrency(), new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>No.Of Installments Proposed By Group</label>
                                @Html.TextBox("NoofInstallmentsProposed", Model.NoofInstallmentsProposed, new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Loan Type (Principle A/c Head)</label><br />
                                @Html.TextBoxFor(model => model.PrincipleAHName, "", new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Interest Account Head</label><br />
                                @Html.TextBoxFor(model => model.InterestAHName, "", new { @class = "form-control", @disabled = "disabled" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Interest Rate %</label>
                                @Html.TextBoxFor(model => model.ROI, new { @readonly = "readonly", @class = "form-control" })
                                @Html.HiddenFor(m => m.InterestRateID)
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Monthly Due Day</label>
                                <input type="text" class="form-control" id="txtDueDay" name="txtDueDay" readonly="true" value="@ViewBag.MeetingDueDay" />
                            </div>
                        </div>

                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Mode</label>
                                @Html.TextBoxFor(model => model.FrequencyMode, new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Project Purpose</label>
                                @Html.TextBoxFor(model => model.ProjectName, new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Loan Purpose</label>
                                @Html.TextBoxFor(model => model.LoanPurposeName, new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Sanction Amount By M.D</label>
                                @Html.TextBox("MDSanctionAmount", Model.MDSanctionAmount.ToDisplayCurrency(), new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-lg-3">
                            <div class="form-group">
                                <label>Installments Proposed By M.D</label>
                                @Html.TextBoxFor(model => model.MDInstallments, new { @readonly = "readonly", @class = "form-control" })
                            </div>
                        </div>
                        @if (Model.AccountMasterId > 0)
                        {
                            <div class="col-lg-3">
                                <div class="form-group">
                                    <label>Member Payment Voucher Number</label>
                                    <br />
                                    <a class="form-control" href="@Url.Content("../MemberPayment/ViewMemberPayment")?id=@(Model.AccountMasterId.EncryptString())">@Model.PaymentVoucherNumber</a>
                                </div>
                            </div>
                        }
                    </div>
                    <hr style="margin: 5px 0" />
                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs" role="tablist">
                        <li class="active" id="ldisbursement">
                            <a href="#disbursement" role="tab" data-toggle="tab">
                                Disbursement
                            </a>
                        </li>
                        <li>
                            <a href="#approvals" role="tab" data-toggle="tab">
                                Application Approval History
                            </a>
                        </li>
                        @if (Model.DisbursedAmount > 0)
                        {
                            <li>
                                <a href="#schedule" role="tab" data-toggle="tab">
                                    Schedule
                                </a>
                            </li>
                        }
                    </ul>
                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div class="tab-pane fade active in" id="disbursement">
                            <br />
                            <div class="row">
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Disbursement Amount</label>
                                        @Html.TextBox("DisbursedAmount", (Model.DisbursedAmount > 0 ? Model.DisbursedAmount.ToDisplayCurrency() : Model.MDSanctionAmount.ToDisplayCurrency()), new { @readonly = "readonly", @class = "form-control" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Number Of Installments</label>
                                        @Html.TextBox("NoOfInstallments", (Model.NoOfInstallments > 0 ? Model.NoOfInstallments : Model.MDInstallments), new { @readonly = "readonly", @class = "form-control" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Reference Number</label>
                                        @Html.TextBoxFor(m => m.ReferenceNumber, new { @class = "form-control" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Source of fund</label>
                                        <select id="SourceOfFund" name="SourceOfFund" class="form-control required">
                                            <option value="GOF"> Group Own Fund</option>
                                            <option value="OF"> Other</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Transaction Mode</label><br />
                                        @Html.DropDownListFor(m => m.TransactionMode, new List<SelectListItem>
                                 {
                                    new SelectListItem{ Text="Cash", Value = "C" },
                                    new SelectListItem{ Text="Cash Deposit at Bank", Value = "BD" },
                                    new SelectListItem {Text="Cheque Deposit at Bank",Value="BC" }
                                 }, new { @class = "form-control required" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Disbursement Date</label>
                                        @Html.DropDownListFor(m => m.DisbursementDate, (SelectList)ViewBag.MonthMeetings, "Select Date", new { @class = "form-control required", @id = "DisbursementDate" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>1st Installment Starts From</label>
                                        @Html.TextBox("InstallmentStartFrom", Model.InstallmentStartFrom.ToDisplayDateFormat(), new { @class = "form-control required", @id = "InstallmentStartFrom", @name = "InstallmentStartFrom", @placeholder = "DD/MM/YYY", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Final installment Date</label>
                                        @Html.TextBox("FinalInstallmentDate", Model.FinalInstallmentDate.ToDisplayDateFormat(), new { @class = "form-control required", @id = "FinalInstallmentDate", @name = "FinalInstallmentDate", @placeholder = "DD/MM/YYY", @readonly = "readonly" })
                                    </div>
                                </div>
                                <div class="col-lg-3">
                                    <div class="form-group">
                                        <label>Monthly Principal Demand</label>
                                        <input type="text"  id="MonthlyPrincipalDemand" value="@Model.MonthlyPrincipalDemand" name="MonthlyPrincipalDemand" class="form-control" />
                                    </div>
                                </div>
                                <div class="col-lg-6" id="dvToBank">
                                    <div class="form-group">
                                        <label>Group Bank Account</label>
                                        @Html.DropDownListFor(m => m.BankEntryId, (SelectList)ViewBag.slBankAh, "Select Bank Account Head", new { @class = "form-control required" })
                                    </div>
                                </div>
                                <div class="col-lg-3 dv-cheque">
                                    <div class="form-group">
                                        <label>Cheque Number</label>
                                        @Html.TextBoxFor(m => m.ChequeNumber, null, new { @class = "form-control number-only required" })
                                    </div>
                                </div>
                                <div class="col-lg-3 dv-cheque">
                                    <div class="form-group">
                                        <label>Cheque Date</label>
                                        <input type="text" value="@Model.ChequeDate.ToDisplayDateFormat()" class="form-control required" id="ChequeDate" name="ChequeDate" placeholder="Select ChequeDate" readonly="true" />
                                    </div>
                                </div>

                            </div>
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="form-group">
                                        <label>Disbursement Comments</label>
                                        @Html.TextAreaFor(m => m.DisbursementComments, new { @class = "form-control" })
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="approvals">
                            <div class="table-responsive">
                                <br />
                                <div id="dataTables-example_wrapper" class="dataTables_wrapper form-inline" role="grid">
                                    <table class="table table-striped table-bordered table-hover dataTable no-footer" aria-describedby="dataTables-example_info" id="tblApprovals" style="width:90%">
                                        <thead>
                                            <tr role="row">
                                                <th style="width:10%;"></th>
                                                <th style="width:10%;">Approver Name</th>
                                                <th style="width:20%;">Saction/<br />Recommended Amount</th>
                                                <th style="width:5%;">No Of Installments</th>
                                                <th>Comments</th>
                                                <th class="text-right" style="width:15%;">APPROVED/REJECTED</th>
                                                <th style="width:20%;" class="text-right">Date</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var objApp in Model.lstApprovals)
                                            {
                                                <tr class="gradeA odd" id="trGL">
                                                    <td>
                                                        <label>@(objApp.ApprovalType == "CA" ? "GROUP" : objApp.ApprovalType == "CDA" ? "C.D.A" : objApp.ApprovalType == "RI" ? "R.I" : "M.D")</label>
                                                    </td>
                                                    <td>
                                                        <label>@objApp.ActionBy</label>
                                                    </td>
                                                    <td>
                                                        <label>@(objApp.LoanSanctionAmount > 0 ? objApp.LoanSanctionAmount.ToString() : "")</label>
                                                    </td>
                                                    <td>
                                                        <label>@(objApp.NoOfInstallments > 0 ? objApp.NoOfInstallments.ToString() : "")</label>
                                                    </td>
                                                    <td>
                                                        <label> @(!string.IsNullOrWhiteSpace(objApp.ApprovalComments) ? objApp.ApprovalComments : "")</label>
                                                    </td>
                                                    <td class="text-right">
                                                        <label>
                                                            @(Convert.ToString(objApp.Action) == "APP" ? "APPROVED" : "REJECTED")
                                                        </label>
                                                    </td>
                                                    <td class="text-right">
                                                        <label>
                                                            @(objApp.ActionDate.Ticks > 0 ? objApp.ActionDate.ToString("MMMM dd, yyyy hh:mm tt") : string.Empty)
                                                        </label>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane fade" id="schedule">
                            <div class="table-responsive">
                                <br />
                                @if (Model != null && Model.Schedule != null)
                                {
                                    if (Model.StatusCode == "APP")
                                    {
                                        <span style="color:red;">Note: The below is Sample EMI Schedule</span>
                                    }
                                    <div id="dataTables-example_wrapper" class="dataTables_wrapper form-inline" role="grid">
                                        <table class="table table-striped table-bordered table-hover" id="Table1">
                                            <thead>
                                                <tr>
                                                    <th class="text-center">Inst. No.</th>
                                                    <th class="text-center">Due Date</th>
                                                    <th class="text-right">Prin. Demand</th>
                                                    <th class="text-right">Interest Demand</th>
                                                    <th class="text-right">EMI</th>
                                                    <th class="text-right">Principal Opening Balance</th>
                                                    <th class="text-right">Closing Balance</th>
                                                    <th class="text-center">Days</th>
                                                    <th class="text-center">Int.Rate</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var obj in Model.Schedule)
                                                {
                                                    <tr class="gradeA odd">
                                                        <td class="text-center">@obj.PERIOD</td>
                                                        <td class="text-center">@obj.PAYDATE.ToDisplayDateFormat()</td>
                                                        <td class="text-right">@obj.PRINCIPAL.ToDisplayCurrency()</td>
                                                        <td class="text-right">@obj.INTEREST.ToDisplayCurrency()</td>
                                                        <td class="text-right">@((obj.PRINCIPAL + obj.INTEREST).ToDisplayCurrency())</td>
                                                        <td class="text-right">@obj.Opening_Balance.ToDisplayCurrency()</td>
                                                        <td class="text-right">@obj.CURRENT_BALANCE.ToDisplayCurrency()</td>
                                                        <td class="text-center">@obj.DAYS</td>
                                                        <td class="text-center">@obj.INTERESTRate</td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
                <div class="panel-footer">
                    <div class="form-group">
                        @if (!isView)
                        {
                            <button type="submit" class="btn btn-outline btn-primary lock-dependent" onclick="return validation(false);">Submit</button>
                            if (Model.DisbursedAmount > 0)
                            {
                                <button type="submit" class="btn btn-primary lock-dependent" onclick="return validateConfirm(true);">Confirm & Disburse</button> @*formaction="ConfirmMemberLoanApplication" formmethod="post">Forward/Confirm</button>*@
                            }
                        }
                        <button type="button" class="btn btn-default pull-right" onclick="BackToList();">Back To List</button>
                        @Html.HiddenFor(m => m.StatusCode)
                        @Html.Hidden("hdnIsConfirm", "0")
                    </div>
                </div>
            </div>
        </div>
    </div>
    @Scripts.Render("~/bundles/jqueryui")
    @Styles.Render("~/Content/cssjqryUi")
    <script type="text/javascript">

        var v = new Date();
        $(function () {

            var isView = ('@isView').toLowerCase() == 'true';

            if (isView) {
                $('#disbursement').find('input[type="text"],select,textarea').prop('disabled', true);
            }

            /* $('#InstallmentStartFrom').datepicker({
                 dateFormat: "dd/M/yy",
                 changeMonth: true,
                 changeYear: false,
                 changeDate: false,
                 yearRange: "-60:+100",
                 onSelect: function (selectedDate) {
                     var meetingDay = parseInt($('#txtDueDay').val());
                     var oldValue = $("#FinalInstallmentDate").val();
                     var dt = new Date(selectedDate);

                     if (dt.getDate() != meetingDay) {
                         $("#FinalInstallmentDate").val(oldValue);
                     } else {
                         dt.setDate(dt.getDate() + 1)
                     }

                     $("#FinalInstallmentDate").datepicker("option", "minDate", dt);
                     changelastinstallmentdate();
                 },
                 beforeShowDay: function (date) {
                     var meetingDay = parseInt($('#txtDueDay').val());
                     if (date.getDate() == meetingDay) {
                         return [true, ''];
                     }

                     return [false, ''];
                 }
             });
             $('#FinalInstallmentDate').datepicker({
                 dateFormat: "dd/M/yy",
                 changeMonth: true,
                 changeYear: true,
                 yearRange: "-60:+100"

             });
             $('#txtDisbursementDate').datepicker({
                 minDate: new Date($('#LoanApplicationDate').val()),
                 dateFormat: "dd/M/yy",
                 changeMonth: true,
                 changeYear: true,
                 yearRange: "-60:+100",
                 onSelect: function (selectedDate) {
                     DisbursementDateChange(selectedDate)
                 }
             });
             */
            $('#ChequeDate').datepicker({
                dateFormat: "dd/M/yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-10:+20",
                minDate: __currentOpenMonth,
                defaultDate: __currentOpenMonth
            });

            $('#DisbursementDate').on('change', function () {
                var selectedDate = new Date($(this).val());
                DisbursementDateChange(selectedDate);
            });
        });

        function DisbursementDateChange(selectedDate) {
            //debugger;
            var dt = new Date(getDisbursementDate());
            var meetingday = $('#txtDueDay').val();
            if (dt.getDate() >= parseInt(meetingday)) {
                dt.setMonth(dt.getMonth() + 1)
            }
            dt.setDate(parseInt(meetingday));
            //debugger;
            var dtDisbursement = new Date(getDisbursementDate());

            var diffDays = Date.daysBetween(dtDisbursement, dt);
            if (diffDays < 15) {
                dt.setMonth(dt.getMonth() + 1)
            }


            $("#InstallmentStartFrom").datepicker("option", "minDate", dt);
            //$("#InstallmentStartFrom").datepicker("option", "dateFormat", "dd/M/yy");
            $("#InstallmentStartFrom").val(getFormattedDateString(dt));
            changelastinstallmentdate();
        }

        function getmonthlyinstallment() {
            var princ = $('#DisbursedAmount').val();
            var term = $('#NoOfInstallments').val();
            var intr = parseInt($('#ROI').val()) / 1200;
            if (princ != '' && term != '' && parseInt(princ) != 0 && !isNaN(term) && parseInt(term) != 0) {
                princ = princ.replace(',', '');
                term = term.replace(',', '');
                var monthlyamount = parseInt(princ * intr / (1 - (Math.pow(1 / (1 + intr), term))));
                $('#MonthlyPrincipalDemand').val(monthlyamount);
            }
        }

        Date.daysBetween = function (date1, date2) {
            //Get 1 day in milliseconds
            var one_day = 1000 * 60 * 60 * 24;

            // Convert both dates to milliseconds
            var date1_ms = date1.getTime();
            var date2_ms = date2.getTime();

            // Calculate the difference in milliseconds
            var difference_ms = date2_ms - date1_ms;

            // Convert back to days and return
            return Math.round(difference_ms / one_day);
        }

        function getFormattedDateString(dt) {
            var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
            var date = dt;
            var day = date.getDate();
            var monthIndex = date.getMonth();
            var year = date.getFullYear();

            return day + '/' + monthNames[monthIndex] + '/' + year;
        }

        function getDisbursementDate() {
            var tMode = $('#TransactionMode').val();
            if (tMode == "C") {
                return $('#DisbursementDate').val();
            } else {
                return $('#DisbursementDate').val();
                //return $('#txtDisbursementDate').val();
            }
        }

        function changelastinstallmentdate() {
            var noofinstallments = $('#NoOfInstallments').val();
            if (noofinstallments == '') {
                $('#FinalInstallmentDate').val('');
                return;
            }
            if (parseInt(noofinstallments) <= 0) {
                $('#NoOfInstallments').val('0');
                $('#FinalInstallmentDate').val('');
                $('#MonthlyPrincipalDemand').val('0');
            }
            var disbursementDate = getDisbursementDate();
            var firstInstallmentDate = $('#InstallmentStartFrom').val();

            if (disbursementDate == '' || firstInstallmentDate == '') {
                $('#FinalInstallmentDate').val('');
                if (disbursementDate == '')
                    $('#InstallmentStartFrom').val('');
                $('#MonthlyPrincipalDemand').val('0');
                return;
            }
            //add months is noof installments
            var fiDate = new Date(firstInstallmentDate);
            fiDate.setMonth(fiDate.getMonth() + parseInt(noofinstallments));

            //assigmn
            $('#FinalInstallmentDate').val(getFormattedDateString(fiDate));

            //cal emi
            getmonthlyinstallment();

        }

        $(document).ready(function () {
            if ('@(Model!= null && !string.IsNullOrEmpty(Model.SourceOfFund) ? Model.SourceOfFund : "")' != '')
                $('#SourceOfFund').val('@Model.SourceOfFund');

            if ('@(Model != null && !string.IsNullOrEmpty(Model.TransactionMode) ?  Model.TransactionMode : "")' != '')
                $('#TransactionMode').val('@Model.TransactionMode');

            if ('@(Model != null && Model.DisbursementDate != DateTime.MinValue ? Model.DisbursementDate.ToDisplayDateFormat() : "")' != '')
                $('#DisbursementDate').val('@Model.DisbursementDate.ToDisplayDateFormat()');

            TransactionModeChange();

            $('#TransactionMode').on('change', function () {
                TransactionModeChange();
            });
        });

        function TransactionModeChange() {
            var tMode = $('#TransactionMode').val();
            $('.dv-cheque').hide();
            if (tMode == "C") {
                $('#dvToBank').hide();
            } else {
                $('#dvToBank').show();
                if (tMode == "BC") {
                    $('.dv-cheque').show();
                }
            }
        }

        function BackToList() {
            showProgress();
            window.location.href = '@Url.Content("MemberLoanDisbursementLookup")';
        }
        function resetall(encryptLoanMasterID) {
            if (encryptLoanMasterID != '') {
                if (!confirm('If you continue reset all Fields'))
                    return false;
                window.location.href = '@Url.Content("CreateMemberLoanDisbursementNew?id=")' + encryptLoanMasterID
            }
        }

        function validateConfirm() {

            var isValid = validation();

            $('#hdnIsConfirm').val('1');

            if (isValid) {
                return confirm('if you click OK then specified amount will be disbursed and cannot be Rollback.\n\n The below actions will be done. \n\n 1.Payment voucher will be generated. \n 2.Schedule will be generated. \n 3.Loan status will be moved to Active  \n\n Do you wish to proceed?');
            }
        }

        function validation() {

            $('#hdnIsConfirm').val('0');

            var validate = true;

            if ($.trim($('#DisbursedAmount').val()) == '') {
                $('#DisbursedAmount').css('border-color', 'red');
                validate = false;
            }
            else {
                $('#DisbursedAmount').css('border-color', '');
            }

            var tMode = $('#TransactionMode').val();

            if ($.trim($('#DisbursementDate').val()) == '') {
                $('#DisbursementDate').css('border-color', 'red');
                validate = false;
            }
            else {
                $('#DisbursementDate').css('border-color', '');

            }

            if (tMode != "C") {
                if ($.trim($('#BankEntryId').val()) == '') {
                    $('#BankEntryId').css('border-color', 'red');
                    validate = false;
                }
                else {
                    $('#BankEntryId').css('border-color', '');
                }

                if (tMode == "BC") {
                    if ($.trim($('#ChequeNumber').val()) == '') {
                        $('#ChequeNumber').css('border-color', 'red');
                        validate = false;
                    }
                    else {
                        $('#ChequeNumber').css('border-color', '');
                    }
                    if ($.trim($('#ChequeDate').val()) == '') {
                        $('#ChequeDate').css('border-color', 'red');
                        validate = false;
                    }
                    else {
                        $('#ChequeDate').css('border-color', '');
                    }
                }
            }
            if ($.trim($('#InstallmentStartFrom').val()) == '') {
                $('#InstallmentStartFrom').css('border-color', 'red');
                validate = false;
            }
            else {
                $('#InstallmentStartFrom').css('border-color', '');
            }

            if ($.trim($('#FinalInstallmentDate').val()) == '') {
                $('#FinalInstallmentDate').css('border-color', 'red');
                validate = false;
            }
            else {
                $('#FinalInstallmentDate').css('border-color', '');

            }
            if ($.trim($('#MonthlyPrincipalDemand').val()) == '') {
                $('#MonthlyPrincipalDemand').css('border-color', 'red');
                validate = false;
            }
            else {
                $('#MonthlyPrincipalDemand').css('border-color', '');
            }
            return validate;
        }

        $(document).ready(function () {
            menuLink = "menuTransactions";
            subMenuLink = "lnkSideGroupLoanDisbursement";
            LoadMenu();
        });
    </script>
}